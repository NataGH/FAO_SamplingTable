#
calcFactorWeighted <- function(obs, ref, logratioTrim=.3, sumTrim=0.05) {#
#
if( all(obs==ref) )#
return(1)#
#
nO <- sum(obs)#
nR <- sum(ref)#
logR <- log2((obs/nO)/(ref/nR))         #
absE <- log2(obs/nO) + log2(ref/nR)     #
v <- (nO-obs)/nO/obs + (nR-ref)/nR/ref  #
fin <- is.finite(logR) & is.finite(absE)#
logR <- logR[fin]#
absE <- absE[fin]#
v <- v[fin]#
n <- sum(fin)#
loL <- floor(n * logratioTrim) + 1#
hiL <- n + 1 - loL#
loS <- floor(n * sumTrim) + 1#
hiS <- n + 1 - loS#
keep <- (rank(logR) %in% loL:hiL) & (rank(absE) %in% loS:hiS)#
2^( sum(logR[keep]/v[keep], na.rm=TRUE) / sum(1/v[keep], na.rm=TRUE) )#
}#
#
calcFactor2 <- function(obs, ref) {#
logR <- log2(obs/ref)#
fin <- is.finite(logR)#
d<-density(logR,na.rm=TRUE)#
2^d$x[which.max(d$y)]#
}#
fdPlot <- function( score, indDiff, add=FALSE, xlab="Number of Genes Selected", #
ylab="Number of False Discoveries", lwd=4, type="l", ... ) {#
o <- order(score)#
w <- o %in% indDiff#
x <- 1:length(indDiff)#
y <- cumsum(!w[indDiff])#
matplot(x, y, xlab=xlab, ylab=ylab, lwd=lwd, type=type, add=add, ... )#
}
#
source("functions.R")#
load("LK_data.RData")#
D <- as.matrix(MA.subsetA$M)#
g <- as.character(MA.subsetA$genes$EnsemblGeneID)#
#
o <- order(gsub("R[1-2]L[1-8]","",colnames(D)))#
if(!file.exists("bm.Rdata")) {#
library(biomaRt)#
mart <- useMart("ENSEMBL_MART_ENSEMBL",dataset="hsapiens_gene_ensembl",host="www.ensembl.org")#
bm <- getBM(attributes=c('ensembl_gene_id','hgnc_symbol','refseq_dna'), filters="ensembl_gene_id", value=g, mart=mart)#
save(bm, file="bm.Rdata")#
} else {#
load("bm.Rdata")#
}#
hk <- read.table("human_housekeeping.txt", header=FALSE, sep=" ", as.is=TRUE, stringsAsFactors=FALSE)$V1#
hk1 <- gsub("*","",hk, fixed=TRUE)#
m <- match(hk1, bm$refseq_dna)#
m <- m[!is.na(m)]#
ensHk <- unique(bm$ensembl_gene_id[m])#
m <- match(ensHk, g)#
libSizes <- colSums(D)#
#
foldDiff <- 2#
pUp <- .8#
pDifferential=0.1#
#
xx <- generateDataset(commonTags=2e4, uniqueTags=c(3000,100), foldDifference=foldDiff, #
pUp=pUp, pDifferential=pDifferential, empiricalDist=D[,1], libLimits=rep(1e6,2))#
#
ci <- xx$commonInd#
di <- xx$differentialInd#
nDiff <- length(di)#
library(edgeR)#
fW <- calcNormFactors(xx$DATA)[2]#
#
library(statmod)#
s <- sage.test(xx$DATA[,1], xx$DATA[,2], n1=sum(xx$DATA[,1]), n2=sum(xx$DATA[,2]))#
o <- order(s)#
w <- o %in% di#
sM <- sage.test(xx$DATA[,1], xx$DATA[,2], n1=sum(xx$DATA[,1])/sqrt(fW), n2=sum(xx$DATA[,2])*sqrt(fW))#
oM <- order(sM)#
wM <- oM %in% di#
f <- calcNormFactors(D, logratioTrim=.3)#
#
ff1 <- f[3]#
ff2r <- f[2]#
#
cols <- rep("darkgray",nrow(xx$DATA))#
cols[intersect(di,ci)] <- "blue"#
cols[setdiff(di,ci)] <- "orange"#
ma1 <- maPlot(D[,1], D[,2], normalize=TRUE, pch=19, cex=.5,ylim=c(-8,8), allCol="darkgray", #
xlab=expression( A == log[2] (sqrt(Liver %.% Kidney))  ), ylab=expression(M == log[2](Liver/Kidney)))#
dev.off()#
layoutMatrix <- matrix( c(1,2,4,4,3,3,5,5), nc=2 )#
pdf("GB_fig1.pdf",8,4)#
nf <- layout( layoutMatrix[1:2,] )#
par(mai=c(0.6732,0.639,0.1,0.05))#
#
hist( log2( (D[,1]/libSizes[1]) / (D[,3]/libSizes[3]) ), 20, main="", xlab=expression(log[2](Kidney1/N[K1])-log[2](Kidney2/N[K2])), prob=TRUE ,xlim=c(-7,7))#
abline(v=log2(ff1), lwd=3, col="red")#
mtext("A", side=3, adj=-.16, padj=1, cex=1.5)#
#
hist( -log2( (D[,1]/libSizes[1]) / (D[,2]/libSizes[2]) ), 50, main="", xlab=expression(log[2](Liver/N[L])-log[2](Kidney/N[K])), prob=TRUE,xlim=c(-7,7), ylim=c(0,.45) )#
lines(density(ma1$M[m]), col="green",lwd=2)#
abline(v=0, lty=3, col="black", lwd=3)#
mtext("B", side=3, adj=-.16, padj=1, cex=1.5)#
abline(v=log2(ff2r), lwd=3, col="red")#
#
ma1 <- maPlot(D[,1], D[,2], normalize=TRUE, pch=19, cex=.5,ylim=c(-8,8),allCol="darkgray", #
xlab=expression( A == log[2] (sqrt(Liver/N[L] %.% Kidney/N[K]))  ), ylab=expression(M == log[2](Liver/N[L])-log[2](Kidney/N[K])))#
grid(col="black")#
points(ma1$A[m], ma1$M[m], pch=19, col="green", cex=.4)#
abline(h=median(ma1$M[m]), col="green",lwd=1.5)#
abline(h=log2(ff2r), col="red",lwd=1.5)#
legend("bottomright",legend=c("housekeeping genes","unique to a sample"),col=c("green","orange"),pch=19,cex=0.9,bg="white")#
arrows( -9, 8, -10.5, 7, length=.1, lwd=4 )#
mtext("C", side=3, adj=-.16, padj=1, cex=1.5)#
dev.off()#
pdf("GB_fig2.pdf",h=4,7)#
par(mfrow=c(1,2))#
par(mai=c(0.782,0.789,0.1,0.1))#
#
maPlot(xx$DATA[,1], xx$DATA[,2], normalize=TRUE, pch=".", cex=2.5, col=cols, allCol="darkgray", ylim=c(-8,8))#
grid(col="black")#
abline(h=log2(fW), col="red")#
legend("bottomright",legend=c("2 fold DE","unique to a sample"),col=c("blue","orange"),pch=".",pt.cex=3,cex=0.9,bg="white")#
mtext("A", side=3, adj=-.25, padj=1, cex=1.5)#
#
plot(1:nDiff, cumsum(!w[1:nDiff]), xlab="Number of Genes Selected", ylab="Number of False Discoveries", lwd=4, type="l" )#
lines(1:nDiff, cumsum(!wM[1:nDiff]), lwd=4, type="l", col="red" )#
grid(col="black")#
legend("topleft",c("Fisher Test (total reads)","Fisher Test (TMM)"),col=c("black","red"),lwd=4, bg="white",cex=0.8)#
mtext("B", side=3, adj=-.25, padj=1, cex=1.5)#
#
dev.off()
?data
data(cars)
data<-data(cars)
data
ls
getwd
getwd()
cars
dim(data)
dim(cars)
plot(cars,type=l)
plot(cars,type='l')
?lm
reg<-lm(dist~speed,cars)
reg
plot(reg)
plot(cars)
attributes(reg)
anova(reg)
lm(formula=dist~speed, data= cars)
summury(reg)
Ã¹
summurt(reg)
summary(reg)
?MASS#
cups#
?step#
cpus#
data(cpus)#
?cpus#
?step#
?biplot#
#
GMAT<-c[6,3]#
GMAT<-c[1,3]#
#
GMAT<-c[3]#
?c#
a<-c(list(A=c(B=1,C=2), B=c(E=7)), recursive=TRUE)#
a<-c(list(A=c(B=1,C=2), B=c(E=7)))#
#
a<-c(list(A=c(B=1,C=2), B=c(E=7)), recursive=TRUE)#
#
a#
c(list(A=c(B=1)), recursive=TRUE)#
#
?matrix#
nx<-6#
ny<-3#
dim(x)<-c(nx,ny)#
mdat <- matrix(c(1,2,3, 11,12,13), nrow = 2, ncol=3, byrow=TRUE,#
dimnames = list(c("row1", "row2"),#
c("C.1", "C.2", "C.3")))#
mdat#
gmat<-matrix(c(580,500,800,590,510,800,600,500,800,790,800,500,800,790,500,790,790,500),nrow=6,ncol=3,byrow=T,dinmaes=list(c("1","2","3","4","5","6"),c("Analytique","Quantitative","Verbal")))#
gmat<-matrix(c(580,500,800,590,510,800,600,500,800,790,800,500,800,790,500,790,790,500),nrow=6,ncol=3,dinmaes=list(c("1","2","3","4","5","6"),c("Analytique","Quantitative","Verbal")))#
#
gmat<-matrix(c(580,500,800,590,510,800,600,500,800,790,800,500,800,790,500,790,790,500),nrow=6,ncol=3,byrow=T,dinames=list(c("1","2","3","4","5","6"),c("Analytique","Quantitative","Verbal")))#
#
gmat<-matrix(c(580,500,800,590,510,800,600,500,800,790,800,500,800,790,500,790,790,500),nrow=6,ncol=3,byrow=T,dinmaes=list(c("1","2","3","4","5","6"),c("Analytique","Quantitative","Verbal")))#
gmat<-matrix(c(580,500,800,590,510,800,600,500,800,790,800,500,800,790,500,790,790,500),nrow=6,ncol=3,byrow=T,dimnames=list(c("1","2","3","4","5","6"),c("Analytique","Quantitative","Verbal")))#
?biplot#
biplt(gmat)#
biplpt(gmat)#
#
biplot(gmat)#
biplt(gmat[,1],gmat[1,])#
#
biplot(gmat[,1],gmat[1,])#
biplot(gmat[,1],gmat[2,])#
biplot(gmat[,2],gmat[2,])#
biplot(gmat[,],gmat[2,])#
#
biplot(gmat[,],gmat[,2])#
biplot(gmat[,],gmat[,2])#
USArrests#
?princomp#
biplot(gmat[,],gmat[,2])#
biplot(princomp(gmat))#
gmat#
biplot(gmat[,],gmat[,2])#
biplot(princomp(gmat))#
#
biplot(gmat[,],gmat[,2])#
biplot(prcomp(gmat))#
gmat<-matrix(c(580,500,800,590,510,800,600,500,800,790,800,500,800,790,500,790,790,500),nrow=6,ncol=3,byrow=T,dimnames=list(c("1","2","3","4","5","6"),c("Analytique","Quantitative","Verbal")))#
biplot(prcomp(gmat))#
?spectral#
?spec#
download.packages("MASS")
download.packages("MASS")
?download.packages()
?download.packages("MASS", destdir="/usr/bin/R")
download.packages("MASS", destdir="/usr/bin/R")
download.packages("MASS", destdir="/usr/bin/R/")
download.packages("MASS", destdir="/usr/bin/")
[,1]
library(MASS)
?rlm
pol
options(contrasts=c("contr.")
porte<-matrix(c(2.0,2.8,3.3,3.2,4.4,3.6), nrow=8, ncol=10, byrow=TRUE)
porte<-read.table("/Users/marcogarieri/Desktop/porte.txt")
porte
?cat
quit()
sunspots#
spectrum(sunspots)#
garc#
?garchFit()#
?ts()#
library(TSA)#
options(prompt="Abracadabra ")#
a#
plot()#
a <- 5#
plot(a)#
option()#
?option#
?options#
sunspots#
spectrum(sunspots)#
garc#
?garchFit()#
?ts()#
library(TSA)#
options(prompt="Abracadabra ")#
a#
plot()#
a <- 5#
plot(a)#
option()#
?option#
?options#
#
spec#
sens=c(0,48/51,46/51,44/51,33/51,1)#
spec=c(1,33/58,39/58,45/58,56/58,0)#
x <- 1-spec#
y <- sens#
plot(approxfun(x,y))#
?lines#
lines(x::y)#
lines(approxfun(x,y))#
plot(cars, main="Stopping Distance versus Speed")#
#
plot(lines(x,y))#
lines(x)#
lines#
lines(x,y)#
lines(y)#
require(stats)#
sale5 <- c(6, 4, 9, 7, 6, 12, 8, 10, 9, 13)#
plot(sale5)#
abline(lsfit(1:10,sale5))#
#
install.packages("stinepack")#
library("stinepack")#
#
x <- seq(0,2*pi,by=pi/6) #
y <- sin(x) #
y[3] <- -1.5 #
slope. #
xo <- seq(0,2*pi,by=pi/150) #
y1 <- stinterp(x,y,xo,method="sc")$y #
y2 <- stinterp(x,y,xo,method="st")$y #
y3 <- stinterp(x,y,xo,method="pa")$y #
ysp=spline(x,y,n=length(xo)) #
plot(x,y,ylim=c(-1.5,1.5)) #
points(xo,y1,cex=1/5,col=2) #
points(xo,y2,cex=1/5,col=3) #
points(xo,y3,cex=1/5,col=4) #
points(ysp,cex=1/5,col=5) #
#
legend(3, 1, c("Scaled Stineman", "Stineman", "Parabolic", "Spline"), col = #
c(2,3,4,5),lty=1) #
sens=c(0,48/51,46/51,44/51,33/51,1)#
#
sens=c(0,48/51,46/51,44/51,33/51,1)#
spec=c(1,33/58,39/58,45/58,56/58,0)#
x <- 1-spec#
y <- sens#
?stinterp#
stinterp(x,y)#
stinterp(x,y,(0,0))#
#
a=(0,0)#
stinterp(x,y,0)#
stinterp(x,y,1)#
stinterp(x,y,20)#
xo <- seq(0,2*pi,by=pi/150)#
xo <- seq(0,1,by=pi/150)#
x[1]#
x[2]#
x[3]#
x[4]#
x[5]#
x[6]#
order(x)#
x(order(x))#
x[order(x)]#
y[order(x)]#
x<-x[order(x)]#
y<-y[order(x)]#
stinterp(x,y,xo)#
y <- stinterp(x,y,xo)#
x<-x[order(x)]#
#
sens=c(0,48/51,46/51,44/51,33/51,1)#
spec=c(1,33/58,39/58,45/58,56/58,0)#
x <- 1-spec#
y <- sens#
#
x<-x[order(x)]#
y<-y[order(x)]#
#
t <- stinterp(x,y,xo)#
lines(xo,sin(xo))#
#
points(stinterp(x,y,xo),cex=1/5,col=3)#
#
sens=c(48/51,46/51,44/51,33/51)#
spec=c(33/58,39/58,45/58,56/58)#
x <- 1-spec#
y <- sens#
x#
y#
plot(x,y)#
plot(y,x)#
plot(x,y)#
#
a <- x[order(x)]#
a#
b <- y[order(x)]#
b#
plot(a,b)#
head(a)#
c <- c(0,a,1)#
c#
d <- c(0,b,1)#
plot(c,d)#
t#
xo#
points(stinterp(x,y,xo),cex=1/5,col=3)#
xo <- seq(0,1,by=pi/150000)#
points(stinterp(c,d,xo),cex=1/5,col=3)#
points(stinterp(c,d,xo),cex=1/5,col=3, main="ROC")#
plot(c,d, main="ROC")#
plot(c,d, main="ROC",xlab=express(1-spec(pi)))#
plot(c,d, main="ROC",xlab=expression(1-spec(pi)))#
plot(c,d, main="ROC",xlab=expression(1-spec(pi)),ylab=expression(sens(pi)))#
points(stinterp(c,d,xo),cex=1/5,col=2)#
library("stinepack")#
sens=c(48/51,46/51,44/51,33/51)#
spec=(33/58,39/58,45/58,56/58)#
x <- 1-spec#
y <- sens#
a <- c(0,x[order(x)],1)#
b <- c(0,y[order(x)],1)#
xo <- seq(0,1,by=pi/150000)#
plot(c,d, main="ROC",xlab=expression(1-spec(pi)),ylab=expression(sens(pi)))#
points(stinterp(c,d,xo),cex=1/5,col=2)#
po <- seq(0,1,by=0.01)#
plot((1-po)^2,1-po^2)#
plot((1-po)^2,1-po^2, lty="l")#
?plot#
plot((1-po)^2,1-po^2, type="l")#
ind <- list(c(1, 2, 2), c("A", "A", "B"))#
table(ind,1)#
?table#
tapply(1:3, ind, sum)#
table(1)#
table(2)#
table(2,2)#
table(2,3)#
table(c(2,1),c(3,1))#
table(c(1,2),c(1,3))#
table(c(1,2),c(2,3))#
tapply(1:3, ind)#
table(ind)#
table(c(1,1,1),c(2,2,2))#
table(c(1,1,1),c(2,2))#
table(c(1,1,1),c(2,2,3))#
ind#
mls#
?mls#
??mls#
?tapply#
??detach#
?detach#
install.packages(c("rj", "rj.gd"), repos="http://download.walware.de/rj-1.0")#
tmp <- installed.packages()#
tmp#
installedpkgs <- as.vector(tmp[is.na(tmp[,"Priority"]), 1])#
installedpkgs#
save(installedpkgs, file="installed_old.rda")#
rm -rf /Library/Frameworks/R.framework /Applications/R.app#
e#
?kde#
?#
KernSmooth#
install.packages("KernSmooth")#
a_0 <- 2, b_0 <- 12
rm(ls())
rm(list())
rm(list=ls())
a_0 <- 2, b_0 <- 12
a_1 <- 1, b_1 <- 1
n_0 <- c(7,14,28) # patients PBO
n_1 <- 28         # patients treatment
p_0 <- c(0.1,0.2,0.3)  # different value of prob for the PBO
delta <- c(0,0.2,0.4)  # delta for probability tratment
y_1 <- matrix(0,nrow=length(delta),2000)
p_1p <- matrix(0,nrow=length(delta),10000)
y_0 <- rbinom(2000,n_0[1],p_0[1]) # Drawn values for PBO
y_0
for (i in 1:length(delta)){
# For each value of p_0 I have 3 different values of p_1
y_1[i,] <- rbinom(2000,n_1,p_0[1]+delta[i])
for (l in 1:2000){
p_0p <- rbeta(10000,2+y_0[l],12+14-y_0[l])
p_1p[i,] <- rbeta(10000,1+y_1[i,l],1+28-y_1[i,l])
y_1[i,]
i
dim(p_0p)
length(p_0p)
dim(p_1p)
pp
pp[i,] <- pcent(delta_p[i,])
delta_p <- matrix(0,nrow=length(delta),10000)
pp <- matrix(0,nrow=3,1)
for (i in 1:3){
delta_p[i,] <- p_1p[i,]-p_0p
pos <- delta_p[delta_p>0]
pp[i,] <- length(pos[i,])/length(delta_p[i,])
}
pos
library(ARAMIS)#
    source("http://bioconductor.org/biocLite.R")#
    biocLite("cummeRbund")#
library(cummeRbund)#
ll#
ls#
ls(DetailsAnnotationTrack)#
ls("Desktop")#
ls("Desktop/")#
system("lL")#
getwd()#
class()#
system("ls")#
lm#
lm.fit#
ll#
ls#
ls()#
library(ggplot2)#
library(reshape)#
df <- data.frame(cbind(#
  c(rep.int(x = 0, times =7), 1:3), #
  c(1, 1, 1, 0, 1, 0, 1, 1, 0, 0),#
  c(1:3, 1:3, 1:3, NA)))#
library(ggplot2)#
install.packages("reshape")#
library(reshape)#
df <- data.frame(cbind(#
  c(rep.int(x = 0, times =7), 1:3), #
  c(1, 1, 1, 0, 1, 0, 1, 1, 0, 0),#
  c(1:3, 1:3, 1:3, NA)))#
names(df) <- c("cars", "sex", "status")#
df$sex <- factor(df$sex, labels = c("male", "female"))#
df$status <- factor(df$status, labels = c("bad", "ok", "good"))#
df$car <- (df$cars > 0) 
df#
df.long = melt(df, measure.vars=c('sex', 'status'))#
df.long#
df.long.summary = ddply(df.long, .(variable, value), summarize, cars=sum(cars > 0) / length(cars))#
ggplot(data=df.long.summary, aes(x=value, y=cars)) + geom_bar(stat='identity') + facet_wrap(~variable, scales='free_x')#
 x=c(40,30,20,10)#
 barplot(x)#
 mycolors=c("red","blue","green","brown")#
 barplot(x,col=mycolors)#
library(ggplot2)#
DF <- structure(list(Year = c(2003L, 2004L, 2005L, 2006L, 2007L, 2008L, #
2009L, 2010L, 2011L, 2012L, 2013L, 2014L, 2015L, 2003L, 2004L, #
2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, #
2014L, 2015L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, #
2010L, 2011L, 2012L, 2013L, 2014L, 2015L, 2003L, 2004L, 2005L, #
2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 2014L, #
2015L), Metric = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, #
1L, 1L, 1L, 1L, 1L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, #
4L, 4L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, #
3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L), .Label = c("Demand", #
"High", "Low", "Actual"), class = "factor"), MWh = c(498343L, #
1250904L, 1665176L, 2317643L, 2455311L, 3557987L, 4268125L, 5403704L, #
6596158L, 7814387L, 9008863L, 10291085L, 11796549L, 159677L, #
192748L, 248844L, 372661L, 705656L, 838721L, 1188242L, 1708979L, #
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 3631730L, #
5729024L, 6741785L, 9342798L, 11094798L, 0L, 0L, 0L, 0L, 0L, #
0L, 0L, 0L, 1637220L, 1850615L, 2064011L, 2277406L, 2490801L)), .Names = c("Year","Metric", "MWh"), row.names = c(NA, -52L), class = "data.frame")#
DF#
ggplot(DF,aes(x=factor(Year),y=MWh,fill=factor(Metric))) + #
    geom_bar(position="fill")#
dat <- data.frame( fruit=c("Apple", "Apple", "Orange", "Orange", "Orange", "Orange", "Orange", "Pear", "Pear", "Pear"), variable=c("Present", "Absent", "Present", "Present", "Present", "Present", "Absent", "Absent","Absent", "Present") )  #
ggplot(dat, aes(x = fruit)) + geom_bar(aes(fill = variable), position = 'fill')#
ll#
ls()#
system("ls")#
dir()#
setwd("../Shared/da/UniGe/Post_analysis/")#
setwd("/Users/marcogarieri/Shared/da/UniGe/Post_analysis/")#
getwd()#
setwd("/Users/Shared/da/UniGe/Post_analysis/")#
M = read.table('MUT_REP_per_tum_final1.txt', header=TRUE, sep = '\t')#
M$trimut_com=as.character(M$trimut_com)#
M$tri_n=0#
M$mut_n=0#
M$prev_n=0#
M$next_n=0#
M$refe_n=0#
M$tri_n <- apply(cbind(M$trimut_com),1,function(clmn)unlist(strsplit(clmn,"_"))[1])#
M$mut_n <- apply(cbind(M$trimut_com),1,function(clmn)unlist(strsplit(clmn,"_"))[2])#
M$prev_n <- apply(cbind(M$tri_n),1,function(clmn)unlist(strsplit(clmn,""))[1])#
M$refe_n <- apply(cbind(M$tri_n),1,function(clmn)unlist(strsplit(clmn,""))[2])#
M$next_n <- apply(cbind(M$tri_n),1,function(clmn)unlist(strsplit(clmn,""))[3])#
lev=levels(M$Name1)#
M1=c()#
M2=c()#
M2$CT=0#
M2$CA=0#
M2$CG=0#
#
M1=0#
AL=0#
CT=0#
CA=0#
CG=0#
TC=0#
TA=0#
TG=0#
#
CpAL=0  ;       ALpC=0 #
CpCT=0  ;       CTpC=0 #
CpCA=0  ;       CApC=0 #
CpCG=0  ;       CGpC=0 #
CpTC=0  ;       TCpC=0 #
CpTA=0  ;       TApC=0 #
CpTG=0  ;       TGpC=0 #
GpAL=0  ;       ALpG=0 #
GpCT=0  ;       CTpG=0 #
GpCA=0  ;       CApG=0 #
GpCG=0  ;       CGpG=0 #
GpTC=0  ;       TCpG=0 #
GpTA=0  ;       TApG=0 #
GpTG=0  ;       TGpG=0 #
TpAL=0  ;       ALpT=0 #
TpCT=0  ;       CTpT=0 #
TpCA=0  ;       CApT=0 #
TpCG=0  ;       CGpT=0 #
TpTC=0  ;       TCpT=0 #
TpTA=0  ;       TApT=0 #
TpTG=0  ;       TGpT=0 #
ApAL=0  ;       ALpA=0 #
ApCT=0  ;       CTpA=0 #
ApCA=0  ;       CApA=0 #
ApCG=0  ;       CGpA=0 #
ApTC=0  ;       TCpA=0 #
ApTA=0  ;       TApA=0 #
ApTG=0  ;       TGpA=0 #
M3=c()#
M4=c()#
s=1#
for (i in lev){#
M1= M[M$Name1 == i,]#
AL=length(M1$no)#
CT=length(M1$no[M1$mut_n =="C>T"])#
CA=length(M1$no[M1$mut_n =="C>A"])#
CG=length(M1$no[M1$mut_n =="C>G"])#
TC=length(M1$no[M1$mut_n =="T>C"])#
TA=length(M1$no[M1$mut_n =="T>A"])#
TG=length(M1$no[M1$mut_n =="T>G"])#
#
CpAL= length(M1$no[M1$prev_n =="C"                   ]) ;       ALpC= length(M1$no[M1$prev_n =="C"                   ])          #
CpCT= length(M1$no[M1$prev_n =="C" & M1$mut_n =="C>T"]) ;       CTpC= length(M1$no[M1$prev_n =="C" & M1$mut_n =="C>T"])#
CpCA= length(M1$no[M1$prev_n =="C" & M1$mut_n =="C>A"]) ;       CApC= length(M1$no[M1$prev_n =="C" & M1$mut_n =="C>A"])#
CpCG= length(M1$no[M1$prev_n =="C" & M1$mut_n =="C>G"]) ;       CGpC= length(M1$no[M1$prev_n =="C" & M1$mut_n =="C>G"])#
CpTC= length(M1$no[M1$prev_n =="C" & M1$mut_n =="T>C"]) ;       TCpC= length(M1$no[M1$prev_n =="C" & M1$mut_n =="T>C"])#
CpTA= length(M1$no[M1$prev_n =="C" & M1$mut_n =="T>A"]) ;       TApC= length(M1$no[M1$prev_n =="C" & M1$mut_n =="T>A"])#
CpTG= length(M1$no[M1$prev_n =="C" & M1$mut_n =="T>G"]) ;       TGpC= length(M1$no[M1$prev_n =="C" & M1$mut_n =="T>G"])#
GpAL= length(M1$no[M1$prev_n =="G"                   ]) ;       ALpG= length(M1$no[M1$prev_n =="G"                   ])          #
GpCT= length(M1$no[M1$prev_n =="G" & M1$mut_n =="C>T"]) ;       CTpG= length(M1$no[M1$prev_n =="G" & M1$mut_n =="C>T"])#
GpCA= length(M1$no[M1$prev_n =="G" & M1$mut_n =="C>A"]) ;       CApG= length(M1$no[M1$prev_n =="G" & M1$mut_n =="C>A"])#
GpCG= length(M1$no[M1$prev_n =="G" & M1$mut_n =="C>G"]) ;       CGpG= length(M1$no[M1$prev_n =="G" & M1$mut_n =="C>G"])#
GpTC= length(M1$no[M1$prev_n =="G" & M1$mut_n =="T>C"]) ;       TCpG= length(M1$no[M1$prev_n =="G" & M1$mut_n =="T>C"])#
GpTA= length(M1$no[M1$prev_n =="G" & M1$mut_n =="T>A"]) ;       TApG= length(M1$no[M1$prev_n =="G" & M1$mut_n =="T>A"])#
GpTG= length(M1$no[M1$prev_n =="G" & M1$mut_n =="T>G"]) ;       TGpG= length(M1$no[M1$prev_n =="G" & M1$mut_n =="T>G"])#
TpAL= length(M1$no[M1$prev_n =="T"                   ]) ;       ALpT= length(M1$no[M1$prev_n =="T"                   ])          #
TpCT= length(M1$no[M1$prev_n =="T" & M1$mut_n =="C>T"]) ;       CTpT= length(M1$no[M1$prev_n =="T" & M1$mut_n =="C>T"])#
TpCA= length(M1$no[M1$prev_n =="T" & M1$mut_n =="C>A"]) ;       CApT= length(M1$no[M1$prev_n =="T" & M1$mut_n =="C>A"])#
TpCG= length(M1$no[M1$prev_n =="T" & M1$mut_n =="C>G"]) ;       CGpT= length(M1$no[M1$prev_n =="T" & M1$mut_n =="C>G"])#
TpTC= length(M1$no[M1$prev_n =="T" & M1$mut_n =="T>C"]) ;       TCpT= length(M1$no[M1$prev_n =="T" & M1$mut_n =="T>C"])#
TpTA= length(M1$no[M1$prev_n =="T" & M1$mut_n =="T>A"]) ;       TApT= length(M1$no[M1$prev_n =="T" & M1$mut_n =="T>A"])#
TpTG= length(M1$no[M1$prev_n =="T" & M1$mut_n =="T>G"]) ;       TGpT= length(M1$no[M1$prev_n =="T" & M1$mut_n =="T>G"])#
ApAL= length(M1$no[M1$prev_n =="A"                   ]) ;       ALpA= length(M1$no[M1$prev_n =="A"                   ])          #
ApCT= length(M1$no[M1$prev_n =="A" & M1$mut_n =="C>T"]) ;       CTpA= length(M1$no[M1$prev_n =="A" & M1$mut_n =="C>T"])#
ApCA= length(M1$no[M1$prev_n =="A" & M1$mut_n =="C>A"]) ;       CApA= length(M1$no[M1$prev_n =="A" & M1$mut_n =="C>A"])#
ApCG= length(M1$no[M1$prev_n =="A" & M1$mut_n =="C>G"]) ;       CGpA= length(M1$no[M1$prev_n =="A" & M1$mut_n =="C>G"])#
ApTC= length(M1$no[M1$prev_n =="A" & M1$mut_n =="T>C"]) ;       TCpA= length(M1$no[M1$prev_n =="A" & M1$mut_n =="T>C"])#
ApTA= length(M1$no[M1$prev_n =="A" & M1$mut_n =="T>A"]) ;       TApA= length(M1$no[M1$prev_n =="A" & M1$mut_n =="T>A"])#
ApTG= length(M1$no[M1$prev_n =="A" & M1$mut_n =="T>G"]) ;       TGpA= length(M1$no[M1$prev_n =="A" & M1$mut_n =="T>G"])#
#
s=s+1#
#
M2=cbind(AL,CT,CA,CG,TC,TA,TG,CpAL,CpCT,CpCA,CpCG,CpTC,CpTA,CpTG,GpAL,GpCT,GpCA,GpCG,GpTC,GpTA,GpTG,TpAL,TpCT,TpCA,TpCG,TpTC,TpTA,TpTG,ApAL,ApCT,ApCA,ApCG,ApTC,ApTA,ApTG,ALpC,CTpC,CApC,CGpC,TCpC,TApC,TGpC,ALpG,CTpG,CApG,CGpG,TCpG,TApG,TGpG,ALpT,CTpT,CApT,CGpT,TCpT,TApT,TGpT,ALpA,CTpA,CApA,CGpA,TCpA,TApA,TGpA)#
colnames(M2)=c("AL","CT","CA","CG","TC","TA","TG","CpAL","CpCT","CpCA","CpCG","CpTC","CpTA","CpTG","GpAL","GpCT","GpCA","GpCG","GpTC","GpTA","GpTG","TpAL","TpCT","TpCA","TpCG","TpTC","TpTA","TpTG","ApAL","ApCT","ApCA","ApCG","ApTC","ApTA","ApTG","ALpC","CTpC","CApC","CGpC","TCpC","TApC","TGpC","ALpG","CTpG","CApG","CGpG","TCpG","TApG","TGpG","ALpT","CTpT","CApT","CGpT","TCpT","TApT","TGpT","ALpA","CTpA","CApA","CGpA","TCpA","TApA","TGpA")#
M3=cbind(as.matrix(M1[1,]),as.matrix(M2))#
M4=rbind(M4,M3)#
#
}#
head(M5)#
setwd("/Users/marcogarieri/Desktop/")#
M5 <- as.data.frame(M4)#
drop <- c("chr", "start", "end", "strand", "ref", "mut1", "mut2", "Name", "aa", "gene", "tk_strand", "t_alt_count", "t_ref_count", "ucsc_cons", "no", "prev_nt", "ref_nt", "next_nt", "tripl", "mut_type", "trimut", "trimut_com", "AJCC_Stage", "Stage", "Stage_detai", "TUM", "tri_n", "mut_n", "prev_n", "next_n", "refe_n")#
M6 <- M5[,!(names(M5) %in% drop)]#
attach(M6)#
list_cancers <- c("D_BREAST", "D_COLON", "D_HNSCC", "D_LUST", "D_MELANOMA", "D_OVARY")#
for (j in levels(tum)){#
	name <- paste("D_",j,sep="")#
	assign(name, subset(M6, tum == j))#
	append(list_cancers, name)#
}#
D_BREAST$AL <- as.numeric(paste(D_BREAST$AL))#
ggplot(D_BREAST,aes(Name1,AL)) + labs(x="D_BREAST",y="num_mutations", title="Number mutation by sample") + geom_bar(stat="identity") + theme(axis.text.x=element_text(angle=90))#
ggplot(D_BREAST,aes(ER,AL)) + labs(x="D_BREAST",y="num_mutations", title="Number mutation by ER") + geom_bar(stat="identity") + theme(axis.text.x=element_text(angle=90))#
breast_1 <- melt(D_BREAST[,c("Stage_crude","CT","CA","CG","TC","TA","TG")], id=c("Stage_crude"))#
breast_1$value <- as.numeric(paste(breast_1$value))#
breast_1 <- aggregate(breast_1$value, by = list(breast_1$Stage_crude,breast_1$variable),sum)#
names(breast_1) <- c("Stage_crude","variable","value")#
ggplot(breast_1,aes(x=Stage_crude,y=value,fill=variable)) + geom_bar(position="fill") + labs(x="D_BREAST",y="mutations", title="Mutation Spectra by Stage") + theme(axis.text.x=element_text(angle=90))#
breast_2 <- melt(D_BREAST[,c("ER","CT","CA","CG","TC","TA","TG")], id=c("ER"))#
breast_2$value <- as.numeric(paste(breast_2$value))#
breast_2 <- aggregate(breast_2$value, by = list(breast_2$ER,breast_2$variable),sum)#
names(breast_2) <- c("ER","variable","value")#
ggplot(breast_2,aes(x=ER,y=value,fill=variable)) + geom_bar(position="fill") + labs(x="D_BREAST",y="mutations", title="Mutation Spectra by ER") + theme(axis.text.x=element_text(angle=90))#
breast_3 <- melt(D_BREAST[,c("PR","CT","CA","CG","TC","TA","TG")], id=c("PR"))#
breast_3$value <- as.numeric(paste(breast_3$value))#
breast_3 <- aggregate(breast_3$value, by = list(breast_3$PR,breast_3$variable),sum)#
names(breast_3) <- c("PR","variable","value")#
ggplot(breast_3,aes(x=PR,y=value,fill=variable)) + geom_bar(position="fill") + labs(x="D_BREAST",y="mutations", title="Mutation Spectra by PAM50") + theme(axis.text.x=element_text(angle=90))#
br <- D_BREAST[,c("Name1","AL","CT","CA","CG","TC","TA","TG")]#
br_par <- D_BREAST[,c("Name1","ER","PR","HER2","PAM50")]#
m = c("C>T", "C>A", "C>G","T>C","T>A","T>G")#
br$AL <- as.numeric(paste(br$AL))#
br$CT <- as.numeric(paste(br$CT))#
br$CA <- as.numeric(paste(br$CA))#
br$CG <- as.numeric(paste(br$CG))#
br$TC <- as.numeric(paste(br$TC))#
br$TA <- as.numeric(paste(br$TA))#
br$TG <- as.numeric(paste(br$TG))#
br$CT_prop = br$CT/br$AL#
br$CA_prop = br$CA/br$AL#
br$CG_prop = br$CG/br$AL#
br$TC_prop = br$TC/br$AL#
br$TA_prop = br$TA/br$AL#
br$TG_prop = br$TG/br$AL#
plot(density(br$CT_prop), col="1", ylim=c(0,12), xlim=c(0,1), xlab="", main="Mutations' densities in breast")#
br_par_bas <- br_par[br_par$PAM50 == "Basal-like" & !is.na(br_par$PAM50),]#
br_par_enr <- br_par[br_par$PAM50 == "HER2-enriched" & !is.na(br_par$PAM50),]#
br_par_lua <- br_par[br_par$PAM50 == "Luminal A" & !is.na(br_par$PAM50),]#
br_par_lub <- br_par[br_par$PAM50 == "Luminal B" & !is.na(br_par$PAM50),]#
br_par_nor <- br_par[br_par$PAM50 == "Normal-like" & !is.na(br_par$PAM50),]#
br_pam_bas <- br[br$Name1 %in% br_par_bas$Name1,]#
br_pam_enr <- br[br$Name1 %in% br_par_enr$Name1,]#
br_pam_lua <- br[br$Name1 %in% br_par_lua$Name1,]#
br_pam_lub <- br[br$Name1 %in% br_par_lub$Name1,]#
br_pam_nor <- br[br$Name1 %in% br_par_nor$Name1,]#
barplot(c(sum(br_pam_bas$AL)/nrow(br_pam_bas),sum(br_pam_enr$AL)/nrow(br_pam_enr),sum(br_pam_lua$AL)/nrow(br_pam_lua),sum(br_pam_lub$AL)/nrow(br_pam_lub),sum(br_pam_nor$AL)/nrow(br_pam_nor)), names.arg = c("Basal-like", "HER2-enr","Luminal A","Luminal B","Normal-like"), main = "Count PAM50 normalized, breast cancer")#
plot(br$CA_prop,br$CG_prop, main="C>A_vs_C>G", col="1") ;abline(lm(br$CG_prop~br$CA_prop)) ;yy=summary(lm(br$CG_prop~br$CA_prop));legend("topright",c(paste("P=",round(coef(yy)[2,4],4)),paste("r2=",round(yy$r.squared,3))))#

mut <- read.table('BLCA_Seq_HMS.txt_2_mut.txt_3.csv', header=T,sep='\t')#
cnv <- read.table('BLCA_Seq_HMS.txt_2_cnv.txt_3_4.txt.csv', header=T,sep='\t')#

mut$Gene <- as.character(mut$Gene)#
mut_genes <- unique(mut$Gene)#
length(mut_genes)#
cnv$Gene <- as.character(cnv$Gene)#
cnv_genes <- unique(cnv$Gene)#
length(cnv_genes)#

#
uniques <- intersect(mut_genes,cnv_genes)#
length(uniques)#

mut <- subset(mut, mut$Gene %in% uniques)#
cnv <- subset(cnv, cnv$Gene %in% uniques)#
#
tot <- merge(mut,cnv, by="Gene")#
#
tot$List_samples.x <- as.character(tot$List_samples.x)#
tot$List_samples.y <- as.character(tot$List_samples.y)#
tot$List_not_samples.x <- as.character(tot$List_not_samples.x)#
tot$List_not_samples.y <- as.character(tot$List_not_samples.y)#

Y_mut <- sapply(strsplit(tot$List_samples.x, ','), function(x) x)#
Y_cnv <- sapply(strsplit(tot$List_samples.y, ','), function(x) x)#
N_mut <- sapply(strsplit(tot$List_not_samples.x, ','), function(x) x)#
N_cnv <- sapply(strsplit(tot$List_not_samples.y, ','), function(x) x)#

YY <- lapply(mapply(intersect, x=Y_mut, y=Y_cnv),length)#
YN <- lapply(mapply(intersect, x=Y_mut, y=N_cnv),length)#
NY <- lapply(mapply(intersect, x=N_mut, y=Y_cnv),length)#
NN <- lapply(mapply(intersect, x=N_mut, y=N_cnv),length)#

MAT <- mapply(function(x,y,w,z), matrix(c(x,y,w,y)),c(YY,YN,NY,NN))#

MAT <- mapply(function(x,y,w,z), mean(c(x,y,w,y)),c(YY,YN,NY,NN))#

MAT <- mapply(function(x,y,w,z) mean(c(x,y,w,y)),c(YY,YN,NY,NN))#

MAT <- mapply(function(x,y,w,z) mean(c(x,y,w,y)),YY,YN,NY,NN)#

MAT <- mapply(function(x,y,w,z) matrix(c(x,y,w,y)),YY,YN,NY,NN)#

head(YY,1)#

yy <- head(YY,1)#
yn <- head(YN,1)#
ny <- head(NY,1)#
nn <- head(NN,1)#

yy#

yn#

ny#

nn#

mapply(function(x,y,w,z) matrix(c(x,y,w,z),nrow=2),yy,yn,ny,nn)#

unlist(yy)#

mapply(function(x,y,w,z) matrix(c(unlist(x),unlist(y),unlist(w),unlist(z)),nrow=2),yy,yn,ny,nn)#

matrix(c(unlist(x),unlist(y),unlist(w),unlist(z)),nrow=2)#

matrix(c(unlist(yy),unlist(yn),unlist(ny),unlist(nn)),nrow=2)#

a <- unlist(YY)#

a <- unlist(YY)#
b <- unlist(YN)#
c <- unlist(NY)#
c <- unlist(NN)#

a#

a <- unlist(YY)#
b <- unlist(YN)#
c <- unlist(NY)#
d <- unlist(NN)#

cbind(a,b,c,d)#

mat <- cbind(a,b,c,d)#

list(apply(mat,1,function(x) matrix(x,nrow=2)))#

class(mat[1,1])#

list(apply(mat,1,mean)#

)#

apply(mat,1,mean)#

list(apply(mat,1,function (x) meand(x)))#

list(apply(mat,1,function (x) mean(x)))#

list(apply(mat,1,function (x) matrix(x)))#

list(apply(mat,1,function (x) matrix(x,nrow=2)))#

(apply(mat,1,function (x) list(matrix(x,nrow=2))))#

unlist((apply(mat,1,function (x) list(matrix(x,nrow=2)))))#

mats <- apply(mat,1,function (x) list(matrix(x,nrow=2))))#

mats <- apply(mat,1,function (x) list(matrix(x,nrow=2)))#

mats#

class(mats[1])#

class(mats[1][1])#

class(mats[1][1][1])#

str(mats)#

new.mats <- unlist(mats,recursive=F)#

str(new.mats)#

new.mats#

#
#
mut <- read.table('BLCA_Seq_HMS.txt_2_mut.txt_3.csv', header=T,sep='\t')#
cnv <- read.table('BLCA_Seq_HMS.txt_2_cnv.txt_3_4.txt.csv', header=T,sep='\t')#
#
mut$Gene <- as.character(mut$Gene)#
mut_genes <- unique(mut$Gene)#
length(mut_genes)#
cnv$Gene <- as.character(cnv$Gene)#
cnv_genes <- unique(cnv$Gene)#
length(cnv_genes)#
#
uniques <- intersect(mut_genes,cnv_genes)#
length(uniques)#
#
mut <- subset(mut, mut$Gene %in% uniques)#
cnv <- subset(cnv, cnv$Gene %in% uniques)#
#
tot <- merge(mut,cnv, by="Gene")#
#
tot$List_samples.x <- as.character(tot$List_samples.x)#
tot$List_samples.y <- as.character(tot$List_samples.y)#
tot$List_not_samples.x <- as.character(tot$List_not_samples.x)#
tot$List_not_samples.y <- as.character(tot$List_not_samples.y)#
#
Y_mut <- sapply(strsplit(tot$List_samples.x, ','), function(x) x)#
Y_cnv <- sapply(strsplit(tot$List_samples.y, ','), function(x) x)#
N_mut <- sapply(strsplit(tot$List_not_samples.x, ','), function(x) x)#
N_cnv <- sapply(strsplit(tot$List_not_samples.y, ','), function(x) x)#

YY <- unlist(lapply(mapply(intersect, x=Y_mut, y=Y_cnv),length))#
YN <- unlist(lapply(mapply(intersect, x=Y_mut, y=N_cnv),length))#
NY <- unlist(lapply(mapply(intersect, x=N_mut, y=Y_cnv),length))#
NN <- unlist(lapply(mapply(intersect, x=N_mut, y=N_cnv),length))#

YY#

MAT <- cbind(YY,YN,NY,NN)#

MAT <- unlist(apply(MAT,1,function (x) list(matrix(x,nrow=2))),recursive=F)#

Y_mut#

MAT#

YN#

NN#

MAT <- unlist(apply(MAT,1,function (x) list(matrix(x,nrow=2,dimnames = list(MUT = c("Yes", "No"), CNV = c("Yes", "No"))))),recursive=F)#

FIS <- sapply(MAT, function(x) fisher.test(x)[[1]])#

FIS#

FIS_odd <- sapply(MAT, function(x) fisher.test(x)[[3]])#

FIS_odd#

class(FIS_odd)#

tot$F_pvalue <- sapply(MAT, function(x) fisher.test(x)[[1]])#
tot$F_odd <- sapply(MAT, function(x) fisher.test(x)[[3]])#

head(tot)#

tot1 <- tot[,c("Gene", "Num_muts", "Mean_Amplification", "F_pvalue", "F_odd")]#

tot1#

write.table(tot1, "BLCA_Seq_HMS_final.csv",header=T,quote=F,row.names=T)#

write.table(tot1, "BLCA_Seq_HMS_final.csv",quote=F,row.names=T)#

setwd("/Users/marcogarieri/Desktop/MUTs/BLCA")#
mut <- read.table('BLCA_Seq_HMS.txt_2_mut.txt_3.csv', header=T,sep='\t')#
cnv <- read.table('BLCA_Seq_HMS.txt_2_cnv.txt_3_4.txt.csv', header=T,sep='\t')#
#
mut$Gene <- as.character(mut$Gene)#
mut_genes <- unique(mut$Gene)#
length(mut_genes)#
cnv$Gene <- as.character(cnv$Gene)#
cnv_genes <- unique(cnv$Gene)#
length(cnv_genes)#
#
uniques <- intersect(mut_genes,cnv_genes)#
length(uniques)#
#
mut <- subset(mut, mut$Gene %in% uniques)#
cnv <- subset(cnv, cnv$Gene %in% uniques)#
#
tot <- merge(mut,cnv, by="Gene")#
#
tot$List_samples.x <- as.character(tot$List_samples.x)#
tot$List_samples.y <- as.character(tot$List_samples.y)#
tot$List_not_samples.x <- as.character(tot$List_not_samples.x)#
tot$List_not_samples.y <- as.character(tot$List_not_samples.y)#
#
Y_mut <- sapply(strsplit(tot$List_samples.x, ','), function(x) x)#
Y_cnv <- sapply(strsplit(tot$List_samples.y, ','), function(x) x)#
N_mut <- sapply(strsplit(tot$List_not_samples.x, ','), function(x) x)#
N_cnv <- sapply(strsplit(tot$List_not_samples.y, ','), function(x) x)#
#
YY <- unlist(lapply(mapply(intersect, x=Y_mut, y=Y_cnv),length))#
YN <- unlist(lapply(mapply(intersect, x=Y_mut, y=N_cnv),length))#
NY <- unlist(lapply(mapply(intersect, x=N_mut, y=Y_cnv),length))#
NN <- unlist(lapply(mapply(intersect, x=N_mut, y=N_cnv),length))#
#
MAT <- cbind(YY,YN,NY,NN)#
MAT <- unlist(apply(MAT,1,function (x) list(matrix(x,nrow=2))),recursive=F)#
#
tot$YY <- YY#
tot$YN <- YN#
tot$NY <- NY#
tot$NN <- NN#
tot$F_pvalue <- sapply(MAT, function(x) fisher.test(x)[[1]])#
tot$F_odd <- sapply(MAT, function(x) fisher.test(x)[[3]])#
#
tot1 <- tot[,c("Gene", "Num_muts", "Mean_Amplification", "F_pvalue", "F_odd")]#
#
write.table(tot1, "BLCA_Seq_HMS_final.csv",quote=F,row.names=T)#

tot$YY <- YY#
tot$YN <- YN#
tot$NY <- NY#
tot$NN <- NN#
tot$F_pvalue <- sapply(MAT, function(x) fisher.test(x)[[1]])#
tot$F_odd <- sapply(MAT, function(x) fisher.test(x)[[3]])#
#
tot1 <- tot[,c("Gene", "Num_muts", "Mean_Amplification", "YmutYcnv", "YmutNcnv", "NmutYcnv", "NmutNcnv", "F_pvalue", "F_odd")]#

tot#

setwd("/Users/marcogarieri/Desktop/MUTs/BLCA")#
mut <- read.table('BLCA_Seq_HMS.txt_2_mut.txt_3.csv', header=T,sep='\t')#
cnv <- read.table('BLCA_Seq_HMS.txt_2_cnv.txt_3_4.txt.csv', header=T,sep='\t')#
#
mut$Gene <- as.character(mut$Gene)#
mut_genes <- unique(mut$Gene)#
length(mut_genes)#
cnv$Gene <- as.character(cnv$Gene)#
cnv_genes <- unique(cnv$Gene)#
length(cnv_genes)#
#
uniques <- intersect(mut_genes,cnv_genes)#
length(uniques)#
#
mut <- subset(mut, mut$Gene %in% uniques)#
cnv <- subset(cnv, cnv$Gene %in% uniques)#
#
tot <- merge(mut,cnv, by="Gene")#
#
tot$List_samples.x <- as.character(tot$List_samples.x)#
tot$List_samples.y <- as.character(tot$List_samples.y)#
tot$List_not_samples.x <- as.character(tot$List_not_samples.x)#
tot$List_not_samples.y <- as.character(tot$List_not_samples.y)#
#
Y_mut <- sapply(strsplit(tot$List_samples.x, ','), function(x) x)#
Y_cnv <- sapply(strsplit(tot$List_samples.y, ','), function(x) x)#
N_mut <- sapply(strsplit(tot$List_not_samples.x, ','), function(x) x)#
N_cnv <- sapply(strsplit(tot$List_not_samples.y, ','), function(x) x)#
#
YY <- unlist(lapply(mapply(intersect, x=Y_mut, y=Y_cnv),length))#
YN <- unlist(lapply(mapply(intersect, x=Y_mut, y=N_cnv),length))#
NY <- unlist(lapply(mapply(intersect, x=N_mut, y=Y_cnv),length))#
NN <- unlist(lapply(mapply(intersect, x=N_mut, y=N_cnv),length))#
#
MAT <- cbind(YY,YN,NY,NN)#
MAT <- unlist(apply(MAT,1,function (x) list(matrix(x,nrow=2))),recursive=F)#
#
tot$YmutYcnv <- YY#
tot$YmutNcnv <- YN#
tot$NmutYcnv <- NY#
tot$NmutNcnv <- NN#
tot$F_pvalue <- sapply(MAT, function(x) fisher.test(x)[[1]])#
tot$F_odd <- sapply(MAT, function(x) fisher.test(x)[[3]])#
#
tot1 <- tot[,c("Gene", "Num_muts", "Mean_Amplification", "YmutYcnv", "YmutNcnv", "NmutYcnv", "NmutNcnv", "F_pvalue", "F_odd")]#
#
write.table(tot1, "BLCA_Seq_HMS_final.csv",quote=F,row.names=T)#

c(log(10/2,base=2))#

log(10/2,base=2)#

for (in in 1:10){#
	print(paste("La risposta Ã¨", i))#
}#

for (i in 1:10){#
	print("La risposta Ã¨", i)#
}#

for (i in 1:10){#
	print(paste("La risposta Ã¨", i))#
}#

list.files("./CNV", pattern = "_4.txt.csv")#

	name <- substr(i,1,10)#

for (i in list_CNV){#
	name <- substr(i,1,10)#
}#

for (i in list_CNV){#
	name <- substr(i,1,10)#
	j <- list.files("./MUT", pattern = name)#
}#

j#

?substr#

?strsplit#

	name <- subsplit(i,".txt")#

	name <- strsplit(i,".txt")#

	name <- strsplit(i,".txt")[1]#

	name <- unlist(strsplit(i,".txt"))[1]#

	j <- list.files("./MUT", pattern = name)#

setwd("/Users/marcogarieri/Desktop/MUTs/BLCA")#
#
list_CNV <- list.files("./CNV", pattern = "_4.txt.csv")#
for (i in list_CNV){#
	cnv <- read.table(i, header=T,sep='\t')#
	name <- unlist(strsplit(i,".txt"))[1]#
	j <- list.files("./MUT", pattern = name)#
	mut <- read.table(j, header=T,sep='\t')#
	mut$Gene <- as.character(mut$Gene)#
	mut_genes <- unique(mut$Gene)#
	length(mut_genes)#
	cnv$Gene <- as.character(cnv$Gene)#
	cnv_genes <- unique(cnv$Gene)#
	length(cnv_genes)#
#
	uniques <- intersect(mut_genes,cnv_genes)#
	length(uniques)#
#
	mut <- subset(mut, mut$Gene %in% uniques)#
	cnv <- subset(cnv, cnv$Gene %in% uniques)#
#
	tot <- merge(mut,cnv, by="Gene")#
#
	tot$List_samples.x <- as.character(tot$List_samples.x)#
	tot$List_samples.y <- as.character(tot$List_samples.y)#
	tot$List_not_samples.x <- as.character(tot$List_not_samples.x)#
	tot$List_not_samples.y <- as.character(tot$List_not_samples.y)#
#
	Y_mut <- sapply(strsplit(tot$List_samples.x, ','), function(x) x)#
	Y_cnv <- sapply(strsplit(tot$List_samples.y, ','), function(x) x)#
	N_mut <- sapply(strsplit(tot$List_not_samples.x, ','), function(x) x)#
	N_cnv <- sapply(strsplit(tot$List_not_samples.y, ','), function(x) x)#
#
	YY <- unlist(lapply(mapply(intersect, x=Y_mut, y=Y_cnv),length))#
	YN <- unlist(lapply(mapply(intersect, x=Y_mut, y=N_cnv),length))#
	NY <- unlist(lapply(mapply(intersect, x=N_mut, y=Y_cnv),length))#
	NN <- unlist(lapply(mapply(intersect, x=N_mut, y=N_cnv),length))#
#
	MAT <- cbind(YY,YN,NY,NN)#
	MAT <- unlist(apply(MAT,1,function (x) list(matrix(x,nrow=2))),recursive=F)#
#
	tot$YmutYcnv <- YY#
	tot$YmutNcnv <- YN#
	tot$NmutYcnv <- NY#
	tot$NmutNcnv <- NN#
	tot$F_pvalue <- sapply(MAT, function(x) fisher.test(x)[[1]])#
	tot$F_odd <- sapply(MAT, function(x) fisher.test(x)[[3]])#
#
	tot1 <- tot[,c("Gene", "Num_muts", "Mean_Amplification", "YmutYcnv", "YmutNcnv", "NmutYcnv", "NmutNcnv", "F_pvalue", "F_odd")]#
#
	write.table(tot1, paste("FISH/"name,"_final.csv"),quote=F,row.names=T)#
}#

setwd("/Users/marcogarieri/Desktop/MUTs/BLCA")#
#
list_CNV <- list.files("./CNV", pattern = "_4.txt.csv")#
for (i in list_CNV){#
	cnv <- read.table(i, header=T,sep='\t')#
	name <- unlist(strsplit(i,".txt"))[1]#
	j <- list.files("./MUT", pattern = name)#
	mut <- read.table(j, header=T,sep='\t')#
	mut$Gene <- as.character(mut$Gene)#
	mut_genes <- unique(mut$Gene)#
	length(mut_genes)#
	cnv$Gene <- as.character(cnv$Gene)#
	cnv_genes <- unique(cnv$Gene)#
	length(cnv_genes)#
#
	uniques <- intersect(mut_genes,cnv_genes)#
	length(uniques)#
#
	mut <- subset(mut, mut$Gene %in% uniques)#
	cnv <- subset(cnv, cnv$Gene %in% uniques)#
#
	tot <- merge(mut,cnv, by="Gene")#
#
	tot$List_samples.x <- as.character(tot$List_samples.x)#
	tot$List_samples.y <- as.character(tot$List_samples.y)#
	tot$List_not_samples.x <- as.character(tot$List_not_samples.x)#
	tot$List_not_samples.y <- as.character(tot$List_not_samples.y)#
#
	Y_mut <- sapply(strsplit(tot$List_samples.x, ','), function(x) x)#
	Y_cnv <- sapply(strsplit(tot$List_samples.y, ','), function(x) x)#
	N_mut <- sapply(strsplit(tot$List_not_samples.x, ','), function(x) x)#
	N_cnv <- sapply(strsplit(tot$List_not_samples.y, ','), function(x) x)#
#
	YY <- unlist(lapply(mapply(intersect, x=Y_mut, y=Y_cnv),length))#
	YN <- unlist(lapply(mapply(intersect, x=Y_mut, y=N_cnv),length))#
	NY <- unlist(lapply(mapply(intersect, x=N_mut, y=Y_cnv),length))#
	NN <- unlist(lapply(mapply(intersect, x=N_mut, y=N_cnv),length))#
#
	MAT <- cbind(YY,YN,NY,NN)#
	MAT <- unlist(apply(MAT,1,function (x) list(matrix(x,nrow=2))),recursive=F)#
#
	tot$YmutYcnv <- YY#
	tot$YmutNcnv <- YN#
	tot$NmutYcnv <- NY#
	tot$NmutNcnv <- NN#
	tot$F_pvalue <- sapply(MAT, function(x) fisher.test(x)[[1]])#
	tot$F_odd <- sapply(MAT, function(x) fisher.test(x)[[3]])#
#
	tot1 <- tot[,c("Gene", "Num_muts", "Mean_Amplification", "YmutYcnv", "YmutNcnv", "NmutYcnv", "NmutNcnv", "F_pvalue", "F_odd")]#
#
	write.table(tot1, paste("FISH/",name,"_final.csv"),quote=F,row.names=T)#
}#

	cnv#

	name#

	j#

	mut#

setwd("/Users/marcogarieri/Desktop/MUTs/BLCA")#

for (i in list_CNV){#
	cnv <- read.table(i, header=T,sep='\t')#
	name <- unlist(strsplit(i,".txt"))[1]#
	j <- list.files("./MUT", pattern = name)#
	mut <- read.table(j, header=T,sep='\t')#
	mut$Gene <- as.character(mut$Gene)#
	mut_genes <- unique(mut$Gene)#
	length(mut_genes)#
	cnv$Gene <- as.character(cnv$Gene)#
	cnv_genes <- unique(cnv$Gene)#
	length(cnv_genes)#
#
	uniques <- intersect(mut_genes,cnv_genes)#
	length(uniques)#
#
	mut <- subset(mut, mut$Gene %in% uniques)#
	cnv <- subset(cnv, cnv$Gene %in% uniques)#
#
	tot <- merge(mut,cnv, by="Gene")#
#
	tot$List_samples.x <- as.character(tot$List_samples.x)#
	tot$List_samples.y <- as.character(tot$List_samples.y)#
	tot$List_not_samples.x <- as.character(tot$List_not_samples.x)#
	tot$List_not_samples.y <- as.character(tot$List_not_samples.y)#
#
	Y_mut <- sapply(strsplit(tot$List_samples.x, ','), function(x) x)#
	Y_cnv <- sapply(strsplit(tot$List_samples.y, ','), function(x) x)#
	N_mut <- sapply(strsplit(tot$List_not_samples.x, ','), function(x) x)#
	N_cnv <- sapply(strsplit(tot$List_not_samples.y, ','), function(x) x)#
#
	YY <- unlist(lapply(mapply(intersect, x=Y_mut, y=Y_cnv),length))#
	YN <- unlist(lapply(mapply(intersect, x=Y_mut, y=N_cnv),length))#
	NY <- unlist(lapply(mapply(intersect, x=N_mut, y=Y_cnv),length))#
	NN <- unlist(lapply(mapply(intersect, x=N_mut, y=N_cnv),length))#
#
	MAT <- cbind(YY,YN,NY,NN)#
	MAT <- unlist(apply(MAT,1,function (x) list(matrix(x,nrow=2))),recursive=F)#
#
	tot$YmutYcnv <- YY#
	tot$YmutNcnv <- YN#
	tot$NmutYcnv <- NY#
	tot$NmutNcnv <- NN#
	tot$F_pvalue <- sapply(MAT, function(x) fisher.test(x)[[1]])#
	tot$F_odd <- sapply(MAT, function(x) fisher.test(x)[[3]])#
#
	tot1 <- tot[,c("Gene", "Num_muts", "Mean_Amplification", "YmutYcnv", "YmutNcnv", "NmutYcnv", "NmutNcnv", "F_pvalue", "F_odd")]#
#
	write.table(tot1, paste("FISH/",name,"_final.csv"),quote=F,row.names=T)#
}#

paste("FISH/",name,"_final.csv")#

setwd("/Users/marcogarieri/Desktop/MUTs/BLCA")#
#
list_CNV <- list.files("./CNV", pattern = "_4.txt.csv")#
for (i in list_CNV){#
	cnv <- read.table(i, header=T,sep='\t')#
	name <- unlist(strsplit(i,".txt"))[1]#
	j <- list.files("./MUT", pattern = name)#
	mut <- read.table(j, header=T,sep='\t')#
	mut$Gene <- as.character(mut$Gene)#
	mut_genes <- unique(mut$Gene)#
	length(mut_genes)#
	cnv$Gene <- as.character(cnv$Gene)#
	cnv_genes <- unique(cnv$Gene)#
	length(cnv_genes)#
#
	uniques <- intersect(mut_genes,cnv_genes)#
	length(uniques)#
#
	mut <- subset(mut, mut$Gene %in% uniques)#
	cnv <- subset(cnv, cnv$Gene %in% uniques)#
#
	tot <- merge(mut,cnv, by="Gene")#
#
	tot$List_samples.x <- as.character(tot$List_samples.x)#
	tot$List_samples.y <- as.character(tot$List_samples.y)#
	tot$List_not_samples.x <- as.character(tot$List_not_samples.x)#
	tot$List_not_samples.y <- as.character(tot$List_not_samples.y)#
#
	Y_mut <- sapply(strsplit(tot$List_samples.x, ','), function(x) x)#
	Y_cnv <- sapply(strsplit(tot$List_samples.y, ','), function(x) x)#
	N_mut <- sapply(strsplit(tot$List_not_samples.x, ','), function(x) x)#
	N_cnv <- sapply(strsplit(tot$List_not_samples.y, ','), function(x) x)#
#
	YY <- unlist(lapply(mapply(intersect, x=Y_mut, y=Y_cnv),length))#
	YN <- unlist(lapply(mapply(intersect, x=Y_mut, y=N_cnv),length))#
	NY <- unlist(lapply(mapply(intersect, x=N_mut, y=Y_cnv),length))#
	NN <- unlist(lapply(mapply(intersect, x=N_mut, y=N_cnv),length))#
#
	MAT <- cbind(YY,YN,NY,NN)#
	MAT <- unlist(apply(MAT,1,function (x) list(matrix(x,nrow=2))),recursive=F)#
#
	tot$YmutYcnv <- YY#
	tot$YmutNcnv <- YN#
	tot$NmutYcnv <- NY#
	tot$NmutNcnv <- NN#
	tot$F_pvalue <- sapply(MAT, function(x) fisher.test(x)[[1]])#
	tot$F_odd <- sapply(MAT, function(x) fisher.test(x)[[3]])#
#
	tot1 <- tot[,c("Gene", "Num_muts", "Mean_Amplification", "YmutYcnv", "YmutNcnv", "NmutYcnv", "NmutNcnv", "F_pvalue", "F_odd")]#
#
	write.table(tot1, paste("FISH/",name,"_final.csv", sep=""),quote=F,row.names=T)#
}#

setwd("/Users/marcogarieri/Desktop/MUTs/BLCA")#
#
list_CNV <- list.files("./CNV", pattern = "_4.txt.csv")#
for (i in list_CNV){#
	cnv <- read.table(i, header=T,sep='\t')#
	name <- unlist(strsplit(i,".txt"))[1]#
	j <- list.files("./MUT", pattern = name)#
	mut <- read.table(j, header=T,sep='\t')#
	mut$Gene <- as.character(mut$Gene)#
	mut_genes <- unique(mut$Gene)#
	length(mut_genes)#
	cnv$Gene <- as.character(cnv$Gene)#
	cnv_genes <- unique(cnv$Gene)#
	length(cnv_genes)#
#
	uniques <- intersect(mut_genes,cnv_genes)#
	length(uniques)#
#
	mut <- subset(mut, mut$Gene %in% uniques)#
	cnv <- subset(cnv, cnv$Gene %in% uniques)#
#
	tot <- merge(mut,cnv, by="Gene")#
#
	tot$List_samples.x <- as.character(tot$List_samples.x)#
	tot$List_samples.y <- as.character(tot$List_samples.y)#
	tot$List_not_samples.x <- as.character(tot$List_not_samples.x)#
	tot$List_not_samples.y <- as.character(tot$List_not_samples.y)#
#
	Y_mut <- sapply(strsplit(tot$List_samples.x, ','), function(x) x)#
	Y_cnv <- sapply(strsplit(tot$List_samples.y, ','), function(x) x)#
	N_mut <- sapply(strsplit(tot$List_not_samples.x, ','), function(x) x)#
	N_cnv <- sapply(strsplit(tot$List_not_samples.y, ','), function(x) x)#
#
	YY <- unlist(lapply(mapply(intersect, x=Y_mut, y=Y_cnv),length))#
	YN <- unlist(lapply(mapply(intersect, x=Y_mut, y=N_cnv),length))#
	NY <- unlist(lapply(mapply(intersect, x=N_mut, y=Y_cnv),length))#
	NN <- unlist(lapply(mapply(intersect, x=N_mut, y=N_cnv),length))#
#
	MAT <- cbind(YY,YN,NY,NN)#
	MAT <- unlist(apply(MAT,1,function (x) list(matrix(x,nrow=2))),recursive=F)#
#
	tot$YmutYcnv <- YY#
	tot$YmutNcnv <- YN#
	tot$NmutYcnv <- NY#
	tot$NmutNcnv <- NN#
	tot$F_pvalue <- sapply(MAT, function(x) fisher.test(x)[[1]])#
	tot$F_odd <- sapply(MAT, function(x) fisher.test(x)[[3]])#
#
	tot1 <- tot[,c("Gene", "Num_muts", "Mean_Amplification", "YmutYcnv", "YmutNcnv", "NmutYcnv", "NmutNcnv", "F_pvalue", "F_odd")]#
#
	write.table(tot1, file = paste("FISH/",name,"_final.csv", sep=""),quote=F,row.names=T)#
}#

paste("FISH/",name,"_final.csv", sep="")#

setwd("/Users/marcogarieri/Desktop/MUTs/BLCA")#
#
list_CNV <- list.files("./CNV", pattern = "_4.txt.csv")#
for (i in list_CNV){#
	cnv <- read.table(i, header=T,sep='\t')#
	name <- unlist(strsplit(i,".txt"))[1]#
	j <- list.files("./MUT", pattern = name)#
	mut <- read.table(j, header=T,sep='\t')#
	mut$Gene <- as.character(mut$Gene)#
	mut_genes <- unique(mut$Gene)#
	length(mut_genes)#
	cnv$Gene <- as.character(cnv$Gene)#
	cnv_genes <- unique(cnv$Gene)#
	length(cnv_genes)#
#
	uniques <- intersect(mut_genes,cnv_genes)#
	length(uniques)#
#
	mut <- subset(mut, mut$Gene %in% uniques)#
	cnv <- subset(cnv, cnv$Gene %in% uniques)#
#
	tot <- merge(mut,cnv, by="Gene")#
#
	tot$List_samples.x <- as.character(tot$List_samples.x)#
	tot$List_samples.y <- as.character(tot$List_samples.y)#
	tot$List_not_samples.x <- as.character(tot$List_not_samples.x)#
	tot$List_not_samples.y <- as.character(tot$List_not_samples.y)#
#
	Y_mut <- sapply(strsplit(tot$List_samples.x, ','), function(x) x)#
	Y_cnv <- sapply(strsplit(tot$List_samples.y, ','), function(x) x)#
	N_mut <- sapply(strsplit(tot$List_not_samples.x, ','), function(x) x)#
	N_cnv <- sapply(strsplit(tot$List_not_samples.y, ','), function(x) x)#
#
	YY <- unlist(lapply(mapply(intersect, x=Y_mut, y=Y_cnv),length))#
	YN <- unlist(lapply(mapply(intersect, x=Y_mut, y=N_cnv),length))#
	NY <- unlist(lapply(mapply(intersect, x=N_mut, y=Y_cnv),length))#
	NN <- unlist(lapply(mapply(intersect, x=N_mut, y=N_cnv),length))#
#
	MAT <- cbind(YY,YN,NY,NN)#
	MAT <- unlist(apply(MAT,1,function (x) list(matrix(x,nrow=2))),recursive=F)#
#
	tot$YmutYcnv <- YY#
	tot$YmutNcnv <- YN#
	tot$NmutYcnv <- NY#
	tot$NmutNcnv <- NN#
	tot$F_pvalue <- sapply(MAT, function(x) fisher.test(x)[[1]])#
	tot$F_odd <- sapply(MAT, function(x) fisher.test(x)[[3]])#
#
	tot1 <- tot[,c("Gene", "Num_muts", "Mean_Amplification", "YmutYcnv", "YmutNcnv", "NmutYcnv", "NmutNcnv", "F_pvalue", "F_odd")]#
#
	write.table(tot1, file=paste(name,"_final.csv", sep=""),quote=F,row.names=T)#
}#

name#

paste(name,"_final.csv", sep="")#

setwd("/Users/marcogarieri/Desktop/MUTs/BLCA")#
#
list_CNV <- list.files("./CNV", pattern = "_4.txt.csv")#
for (i in list_CNV){#
	cnv <- read.table(i, header=T,sep='\t')#
	name <- unlist(strsplit(i,".txt"))[1]#
	j <- list.files("./MUT", pattern = name)#
	mut <- read.table(j, header=T,sep='\t')#
	mut$Gene <- as.character(mut$Gene)#
	mut_genes <- unique(mut$Gene)#
	length(mut_genes)#
	cnv$Gene <- as.character(cnv$Gene)#
	cnv_genes <- unique(cnv$Gene)#
	length(cnv_genes)#
#
	uniques <- intersect(mut_genes,cnv_genes)#
	length(uniques)#
#
	mut <- subset(mut, mut$Gene %in% uniques)#
	cnv <- subset(cnv, cnv$Gene %in% uniques)#
#
	tot <- merge(mut,cnv, by="Gene")#
#
	tot$List_samples.x <- as.character(tot$List_samples.x)#
	tot$List_samples.y <- as.character(tot$List_samples.y)#
	tot$List_not_samples.x <- as.character(tot$List_not_samples.x)#
	tot$List_not_samples.y <- as.character(tot$List_not_samples.y)#
#
	Y_mut <- sapply(strsplit(tot$List_samples.x, ','), function(x) x)#
	Y_cnv <- sapply(strsplit(tot$List_samples.y, ','), function(x) x)#
	N_mut <- sapply(strsplit(tot$List_not_samples.x, ','), function(x) x)#
	N_cnv <- sapply(strsplit(tot$List_not_samples.y, ','), function(x) x)#
#
	YY <- unlist(lapply(mapply(intersect, x=Y_mut, y=Y_cnv),length))#
	YN <- unlist(lapply(mapply(intersect, x=Y_mut, y=N_cnv),length))#
	NY <- unlist(lapply(mapply(intersect, x=N_mut, y=Y_cnv),length))#
	NN <- unlist(lapply(mapply(intersect, x=N_mut, y=N_cnv),length))#
#
	MAT <- cbind(YY,YN,NY,NN)#
	MAT <- unlist(apply(MAT,1,function (x) list(matrix(x,nrow=2))),recursive=F)#
#
	tot$YmutYcnv <- YY#
	tot$YmutNcnv <- YN#
	tot$NmutYcnv <- NY#
	tot$NmutNcnv <- NN#
	tot$F_pvalue <- sapply(MAT, function(x) fisher.test(x)[[1]])#
	tot$F_odd <- sapply(MAT, function(x) fisher.test(x)[[3]])#
#
	tot1 <- tot[,c("Gene", "Num_muts", "Mean_Amplification", "YmutYcnv", "YmutNcnv", "NmutYcnv", "NmutNcnv", "F_pvalue", "F_odd")]#
}#

cnv#

list_CNV <- list.files("./CNV", pattern = "_4.txt.csv")#

list_CNV#

cnv <- read.table(i, header=T,sep='\t')#

i#

	cnv <- read.table(paste("CNV",i), header=T,sep='\t')#

	cnv <- read.table(paste("CNV",i, sep="/"), header=T,sep='\t')#

setwd("/Users/marcogarieri/Desktop/MUTs/BLCA")#
#
list_CNV <- list.files("./CNV", pattern = "_4.txt.csv")#
for (i in list_CNV){#
	cnv <- read.table(paste("CNV",i,sep="/"), header=T,sep='\t')#
	name <- unlist(strsplit(i,".txt"))[1]#
	j <- list.files("./MUT", pattern = name)#
	mut <- read.table(paste("MUT",j,sep="/"), header=T,sep='\t')#
	mut$Gene <- as.character(mut$Gene)#
	mut_genes <- unique(mut$Gene)#
	length(mut_genes)#
	cnv$Gene <- as.character(cnv$Gene)#
	cnv_genes <- unique(cnv$Gene)#
	length(cnv_genes)#
#
	uniques <- intersect(mut_genes,cnv_genes)#
	length(uniques)#
#
	mut <- subset(mut, mut$Gene %in% uniques)#
	cnv <- subset(cnv, cnv$Gene %in% uniques)#
#
	tot <- merge(mut,cnv, by="Gene")#
#
	tot$List_samples.x <- as.character(tot$List_samples.x)#
	tot$List_samples.y <- as.character(tot$List_samples.y)#
	tot$List_not_samples.x <- as.character(tot$List_not_samples.x)#
	tot$List_not_samples.y <- as.character(tot$List_not_samples.y)#
#
	Y_mut <- sapply(strsplit(tot$List_samples.x, ','), function(x) x)#
	Y_cnv <- sapply(strsplit(tot$List_samples.y, ','), function(x) x)#
	N_mut <- sapply(strsplit(tot$List_not_samples.x, ','), function(x) x)#
	N_cnv <- sapply(strsplit(tot$List_not_samples.y, ','), function(x) x)#
#
	YY <- unlist(lapply(mapply(intersect, x=Y_mut, y=Y_cnv),length))#
	YN <- unlist(lapply(mapply(intersect, x=Y_mut, y=N_cnv),length))#
	NY <- unlist(lapply(mapply(intersect, x=N_mut, y=Y_cnv),length))#
	NN <- unlist(lapply(mapply(intersect, x=N_mut, y=N_cnv),length))#
#
	MAT <- cbind(YY,YN,NY,NN)#
	MAT <- unlist(apply(MAT,1,function (x) list(matrix(x,nrow=2))),recursive=F)#
#
	tot$YmutYcnv <- YY#
	tot$YmutNcnv <- YN#
	tot$NmutYcnv <- NY#
	tot$NmutNcnv <- NN#
	tot$F_pvalue <- sapply(MAT, function(x) fisher.test(x)[[1]])#
	tot$F_odd <- sapply(MAT, function(x) fisher.test(x)[[3]])#
#
	tot1 <- tot[,c("Gene", "Num_muts", "Mean_Amplification", "YmutYcnv", "YmutNcnv", "NmutYcnv", "NmutNcnv", "F_pvalue", "F_odd")]#
#
	write.table(tot1, file=paste("FISH/",name,"_final.csv", sep=""), quote=F, row.names=T)#
}#

setwd("/Users/marcogarieri/Desktop/MUTs/BLCA")#
#
list_CNV <- list.files("./CNV", pattern = "_4.txt.csv")#
for (i in list_CNV){#
	cnv <- read.table(paste("CNV",i,sep="/"), header=T,sep='\t')#
	name <- unlist(strsplit(i,".txt"))[1]#
	j <- list.files("./MUT", pattern = name)#
	mut <- read.table(paste("MUT",j,sep="/"), header=T,sep='\t')#
	mut$Gene <- as.character(mut$Gene)#
	mut_genes <- unique(mut$Gene)#
	length(mut_genes)#
	cnv$Gene <- as.character(cnv$Gene)#
	cnv_genes <- unique(cnv$Gene)#
	length(cnv_genes)#
#
	uniques <- intersect(mut_genes,cnv_genes)#
	length(uniques)#
#
	mut <- subset(mut, mut$Gene %in% uniques)#
	cnv <- subset(cnv, cnv$Gene %in% uniques)#
#
	tot <- merge(mut,cnv, by="Gene")#
#
	tot$List_samples.x <- as.character(tot$List_samples.x)#
	tot$List_samples.y <- as.character(tot$List_samples.y)#
	tot$List_not_samples.x <- as.character(tot$List_not_samples.x)#
	tot$List_not_samples.y <- as.character(tot$List_not_samples.y)#
#
	Y_mut <- sapply(strsplit(tot$List_samples.x, ','), function(x) x)#
	Y_cnv <- sapply(strsplit(tot$List_samples.y, ','), function(x) x)#
	N_mut <- sapply(strsplit(tot$List_not_samples.x, ','), function(x) x)#
	N_cnv <- sapply(strsplit(tot$List_not_samples.y, ','), function(x) x)#
#
	YY <- unlist(lapply(mapply(intersect, x=Y_mut, y=Y_cnv),length))#
	YN <- unlist(lapply(mapply(intersect, x=Y_mut, y=N_cnv),length))#
	NY <- unlist(lapply(mapply(intersect, x=N_mut, y=Y_cnv),length))#
	NN <- unlist(lapply(mapply(intersect, x=N_mut, y=N_cnv),length))#
#
	MAT <- cbind(YY,YN,NY,NN)#
	MAT <- unlist(apply(MAT,1,function (x) list(matrix(x,nrow=2))),recursive=F)#
#
	tot$YmutYcnv <- YY#
	tot$YmutNcnv <- YN#
	tot$NmutYcnv <- NY#
	tot$NmutNcnv <- NN#
	tot$F_pvalue <- sapply(MAT, function(x) fisher.test(x)[[1]])#
	tot$F_odd <- sapply(MAT, function(x) fisher.test(x)[[3]])#
#
	tot1 <- tot[,c("Gene", "Num_muts", "Mean_Amplification", "YmutYcnv", "YmutNcnv", "NmutYcnv", "NmutNcnv", "F_pvalue", "F_odd")]#
#
	write.table(tot1, file=paste("FISH/",name,"_final.csv", sep=""), quote=F, row.names=F)#
}#

setwd("/Users/marcogarieri/Desktop/FAO/Natalia_Project/R_code/")#

gc()#

muTab <- read.csv("ExpectedValues.csv",row.names=1)#

muTab#

n0 <- muTab[,7]#
muTab <- muTab[,-(7:9)]#

n0#

bounds <- array(NA,c(dim(muTab),2))#

dimnames(bounds) <- c(dimnames(muTab),list(c("Lower","Upper")))#

bounds[,,1] <- as.matrix(read.csv("lowerBounds.csv",row.names=1))[,-(7:9)]#

bounds[,,2] <- as.matrix(read.csv("upperBounds.csv",row.names=1))[,-(7:9)]#

bounds#

nIter=100#

N=10000#

controlCol=NULL#

controlRow=NULL#

	sdTab <- abs((bounds[,,2]-bounds[,,1])/2)#

	sdTab#

nr<-nrow(muTab)#
	nc<-ncol(muTab)#

	okTab <- array(NA,c(nr,nc,nIter))#

	if(is.null(controlRow)) controlRow <- do.call(rbind,lapply(1:nr,function(i)range(round(rnorm(N,muTab[i,nc],sdTab[i,nc])))))#

controlRow#

?runif#

	if(is.null(controlCol)) controlCol <- do.call(cbind,lapply(1:nc,function(j)range(round(rnorm(N,colSums(muTab),sqrt(colSums(sdTab^2)))))))#

controlCol#

	iter <- t <- 1#

		sim <- do.call(rbind,lapply(1:nr,function(i){#
			rrow <- rep(NA,nc)#
			repeat{#
				rrow[-nc] <- apply(bounds[i,-nc,],1,function(x)sample(x[1]:x[2],1))#
				rrow[nc] <- (n0[i]-sum(rrow[-nc]))#
				if(rrow[nc]>=controlRow[i,1] & rrow[nc]<=controlRow[i,2]) break#
				browser()#
				}#
			return(rrow)#
			}))#

		totCol <- colSums(sim)#
		cond <- sapply(1:nc,function(j)(totCol[j]>=controlCol[1,j] & totCol[j]<=controlCol[2,j]))#
		if(all(cond)){#
			okTab[,,t]<-sim#
			t <- t+1#
			print(t)#
			}#
		iter <- iter + 1#
        }#

