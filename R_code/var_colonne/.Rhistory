#
calcFactorWeighted <- function(obs, ref, logratioTrim=.3, sumTrim=0.05) {#
#
if( all(obs==ref) )#
return(1)#
#
nO <- sum(obs)#
nR <- sum(ref)#
logR <- log2((obs/nO)/(ref/nR))         #
absE <- log2(obs/nO) + log2(ref/nR)     #
v <- (nO-obs)/nO/obs + (nR-ref)/nR/ref  #
fin <- is.finite(logR) & is.finite(absE)#
logR <- logR[fin]#
absE <- absE[fin]#
v <- v[fin]#
n <- sum(fin)#
loL <- floor(n * logratioTrim) + 1#
hiL <- n + 1 - loL#
loS <- floor(n * sumTrim) + 1#
hiS <- n + 1 - loS#
keep <- (rank(logR) %in% loL:hiL) & (rank(absE) %in% loS:hiS)#
2^( sum(logR[keep]/v[keep], na.rm=TRUE) / sum(1/v[keep], na.rm=TRUE) )#
}#
#
calcFactor2 <- function(obs, ref) {#
logR <- log2(obs/ref)#
fin <- is.finite(logR)#
d<-density(logR,na.rm=TRUE)#
2^d$x[which.max(d$y)]#
}#
fdPlot <- function( score, indDiff, add=FALSE, xlab="Number of Genes Selected", #
ylab="Number of False Discoveries", lwd=4, type="l", ... ) {#
o <- order(score)#
w <- o %in% indDiff#
x <- 1:length(indDiff)#
y <- cumsum(!w[indDiff])#
matplot(x, y, xlab=xlab, ylab=ylab, lwd=lwd, type=type, add=add, ... )#
}
#
source("functions.R")#
load("LK_data.RData")#
D <- as.matrix(MA.subsetA$M)#
g <- as.character(MA.subsetA$genes$EnsemblGeneID)#
#
o <- order(gsub("R[1-2]L[1-8]","",colnames(D)))#
if(!file.exists("bm.Rdata")) {#
library(biomaRt)#
mart <- useMart("ENSEMBL_MART_ENSEMBL",dataset="hsapiens_gene_ensembl",host="www.ensembl.org")#
bm <- getBM(attributes=c('ensembl_gene_id','hgnc_symbol','refseq_dna'), filters="ensembl_gene_id", value=g, mart=mart)#
save(bm, file="bm.Rdata")#
} else {#
load("bm.Rdata")#
}#
hk <- read.table("human_housekeeping.txt", header=FALSE, sep=" ", as.is=TRUE, stringsAsFactors=FALSE)$V1#
hk1 <- gsub("*","",hk, fixed=TRUE)#
m <- match(hk1, bm$refseq_dna)#
m <- m[!is.na(m)]#
ensHk <- unique(bm$ensembl_gene_id[m])#
m <- match(ensHk, g)#
libSizes <- colSums(D)#
#
foldDiff <- 2#
pUp <- .8#
pDifferential=0.1#
#
xx <- generateDataset(commonTags=2e4, uniqueTags=c(3000,100), foldDifference=foldDiff, #
pUp=pUp, pDifferential=pDifferential, empiricalDist=D[,1], libLimits=rep(1e6,2))#
#
ci <- xx$commonInd#
di <- xx$differentialInd#
nDiff <- length(di)#
library(edgeR)#
fW <- calcNormFactors(xx$DATA)[2]#
#
library(statmod)#
s <- sage.test(xx$DATA[,1], xx$DATA[,2], n1=sum(xx$DATA[,1]), n2=sum(xx$DATA[,2]))#
o <- order(s)#
w <- o %in% di#
sM <- sage.test(xx$DATA[,1], xx$DATA[,2], n1=sum(xx$DATA[,1])/sqrt(fW), n2=sum(xx$DATA[,2])*sqrt(fW))#
oM <- order(sM)#
wM <- oM %in% di#
f <- calcNormFactors(D, logratioTrim=.3)#
#
ff1 <- f[3]#
ff2r <- f[2]#
#
cols <- rep("darkgray",nrow(xx$DATA))#
cols[intersect(di,ci)] <- "blue"#
cols[setdiff(di,ci)] <- "orange"#
ma1 <- maPlot(D[,1], D[,2], normalize=TRUE, pch=19, cex=.5,ylim=c(-8,8), allCol="darkgray", #
xlab=expression( A == log[2] (sqrt(Liver %.% Kidney))  ), ylab=expression(M == log[2](Liver/Kidney)))#
dev.off()#
layoutMatrix <- matrix( c(1,2,4,4,3,3,5,5), nc=2 )#
pdf("GB_fig1.pdf",8,4)#
nf <- layout( layoutMatrix[1:2,] )#
par(mai=c(0.6732,0.639,0.1,0.05))#
#
hist( log2( (D[,1]/libSizes[1]) / (D[,3]/libSizes[3]) ), 20, main="", xlab=expression(log[2](Kidney1/N[K1])-log[2](Kidney2/N[K2])), prob=TRUE ,xlim=c(-7,7))#
abline(v=log2(ff1), lwd=3, col="red")#
mtext("A", side=3, adj=-.16, padj=1, cex=1.5)#
#
hist( -log2( (D[,1]/libSizes[1]) / (D[,2]/libSizes[2]) ), 50, main="", xlab=expression(log[2](Liver/N[L])-log[2](Kidney/N[K])), prob=TRUE,xlim=c(-7,7), ylim=c(0,.45) )#
lines(density(ma1$M[m]), col="green",lwd=2)#
abline(v=0, lty=3, col="black", lwd=3)#
mtext("B", side=3, adj=-.16, padj=1, cex=1.5)#
abline(v=log2(ff2r), lwd=3, col="red")#
#
ma1 <- maPlot(D[,1], D[,2], normalize=TRUE, pch=19, cex=.5,ylim=c(-8,8),allCol="darkgray", #
xlab=expression( A == log[2] (sqrt(Liver/N[L] %.% Kidney/N[K]))  ), ylab=expression(M == log[2](Liver/N[L])-log[2](Kidney/N[K])))#
grid(col="black")#
points(ma1$A[m], ma1$M[m], pch=19, col="green", cex=.4)#
abline(h=median(ma1$M[m]), col="green",lwd=1.5)#
abline(h=log2(ff2r), col="red",lwd=1.5)#
legend("bottomright",legend=c("housekeeping genes","unique to a sample"),col=c("green","orange"),pch=19,cex=0.9,bg="white")#
arrows( -9, 8, -10.5, 7, length=.1, lwd=4 )#
mtext("C", side=3, adj=-.16, padj=1, cex=1.5)#
dev.off()#
pdf("GB_fig2.pdf",h=4,7)#
par(mfrow=c(1,2))#
par(mai=c(0.782,0.789,0.1,0.1))#
#
maPlot(xx$DATA[,1], xx$DATA[,2], normalize=TRUE, pch=".", cex=2.5, col=cols, allCol="darkgray", ylim=c(-8,8))#
grid(col="black")#
abline(h=log2(fW), col="red")#
legend("bottomright",legend=c("2 fold DE","unique to a sample"),col=c("blue","orange"),pch=".",pt.cex=3,cex=0.9,bg="white")#
mtext("A", side=3, adj=-.25, padj=1, cex=1.5)#
#
plot(1:nDiff, cumsum(!w[1:nDiff]), xlab="Number of Genes Selected", ylab="Number of False Discoveries", lwd=4, type="l" )#
lines(1:nDiff, cumsum(!wM[1:nDiff]), lwd=4, type="l", col="red" )#
grid(col="black")#
legend("topleft",c("Fisher Test (total reads)","Fisher Test (TMM)"),col=c("black","red"),lwd=4, bg="white",cex=0.8)#
mtext("B", side=3, adj=-.25, padj=1, cex=1.5)#
#
dev.off()
?data
data(cars)
data<-data(cars)
data
ls
getwd
getwd()
cars
dim(data)
dim(cars)
plot(cars,type=l)
plot(cars,type='l')
?lm
reg<-lm(dist~speed,cars)
reg
plot(reg)
plot(cars)
attributes(reg)
anova(reg)
lm(formula=dist~speed, data= cars)
summury(reg)
Ã¹
summurt(reg)
summary(reg)
?MASS#
cups#
?step#
cpus#
data(cpus)#
?cpus#
?step#
?biplot#
#
GMAT<-c[6,3]#
GMAT<-c[1,3]#
#
GMAT<-c[3]#
?c#
a<-c(list(A=c(B=1,C=2), B=c(E=7)), recursive=TRUE)#
a<-c(list(A=c(B=1,C=2), B=c(E=7)))#
#
a<-c(list(A=c(B=1,C=2), B=c(E=7)), recursive=TRUE)#
#
a#
c(list(A=c(B=1)), recursive=TRUE)#
#
?matrix#
nx<-6#
ny<-3#
dim(x)<-c(nx,ny)#
mdat <- matrix(c(1,2,3, 11,12,13), nrow = 2, ncol=3, byrow=TRUE,#
dimnames = list(c("row1", "row2"),#
c("C.1", "C.2", "C.3")))#
mdat#
gmat<-matrix(c(580,500,800,590,510,800,600,500,800,790,800,500,800,790,500,790,790,500),nrow=6,ncol=3,byrow=T,dinmaes=list(c("1","2","3","4","5","6"),c("Analytique","Quantitative","Verbal")))#
gmat<-matrix(c(580,500,800,590,510,800,600,500,800,790,800,500,800,790,500,790,790,500),nrow=6,ncol=3,dinmaes=list(c("1","2","3","4","5","6"),c("Analytique","Quantitative","Verbal")))#
#
gmat<-matrix(c(580,500,800,590,510,800,600,500,800,790,800,500,800,790,500,790,790,500),nrow=6,ncol=3,byrow=T,dinames=list(c("1","2","3","4","5","6"),c("Analytique","Quantitative","Verbal")))#
#
gmat<-matrix(c(580,500,800,590,510,800,600,500,800,790,800,500,800,790,500,790,790,500),nrow=6,ncol=3,byrow=T,dinmaes=list(c("1","2","3","4","5","6"),c("Analytique","Quantitative","Verbal")))#
gmat<-matrix(c(580,500,800,590,510,800,600,500,800,790,800,500,800,790,500,790,790,500),nrow=6,ncol=3,byrow=T,dimnames=list(c("1","2","3","4","5","6"),c("Analytique","Quantitative","Verbal")))#
?biplot#
biplt(gmat)#
biplpt(gmat)#
#
biplot(gmat)#
biplt(gmat[,1],gmat[1,])#
#
biplot(gmat[,1],gmat[1,])#
biplot(gmat[,1],gmat[2,])#
biplot(gmat[,2],gmat[2,])#
biplot(gmat[,],gmat[2,])#
#
biplot(gmat[,],gmat[,2])#
biplot(gmat[,],gmat[,2])#
USArrests#
?princomp#
biplot(gmat[,],gmat[,2])#
biplot(princomp(gmat))#
gmat#
biplot(gmat[,],gmat[,2])#
biplot(princomp(gmat))#
#
biplot(gmat[,],gmat[,2])#
biplot(prcomp(gmat))#
gmat<-matrix(c(580,500,800,590,510,800,600,500,800,790,800,500,800,790,500,790,790,500),nrow=6,ncol=3,byrow=T,dimnames=list(c("1","2","3","4","5","6"),c("Analytique","Quantitative","Verbal")))#
biplot(prcomp(gmat))#
?spectral#
?spec#
download.packages("MASS")
download.packages("MASS")
?download.packages()
?download.packages("MASS", destdir="/usr/bin/R")
download.packages("MASS", destdir="/usr/bin/R")
download.packages("MASS", destdir="/usr/bin/R/")
download.packages("MASS", destdir="/usr/bin/")
[,1]
library(MASS)
?rlm
pol
options(contrasts=c("contr.")
porte<-matrix(c(2.0,2.8,3.3,3.2,4.4,3.6), nrow=8, ncol=10, byrow=TRUE)
porte<-read.table("/Users/marcogarieri/Desktop/porte.txt")
porte
?cat
quit()
sunspots#
spectrum(sunspots)#
garc#
?garchFit()#
?ts()#
library(TSA)#
options(prompt="Abracadabra ")#
a#
plot()#
a <- 5#
plot(a)#
option()#
?option#
?options#
sunspots#
spectrum(sunspots)#
garc#
?garchFit()#
?ts()#
library(TSA)#
options(prompt="Abracadabra ")#
a#
plot()#
a <- 5#
plot(a)#
option()#
?option#
?options#
#
spec#
sens=c(0,48/51,46/51,44/51,33/51,1)#
spec=c(1,33/58,39/58,45/58,56/58,0)#
x <- 1-spec#
y <- sens#
plot(approxfun(x,y))#
?lines#
lines(x::y)#
lines(approxfun(x,y))#
plot(cars, main="Stopping Distance versus Speed")#
#
plot(lines(x,y))#
lines(x)#
lines#
lines(x,y)#
lines(y)#
require(stats)#
sale5 <- c(6, 4, 9, 7, 6, 12, 8, 10, 9, 13)#
plot(sale5)#
abline(lsfit(1:10,sale5))#
#
install.packages("stinepack")#
library("stinepack")#
#
x <- seq(0,2*pi,by=pi/6) #
y <- sin(x) #
y[3] <- -1.5 #
slope. #
xo <- seq(0,2*pi,by=pi/150) #
y1 <- stinterp(x,y,xo,method="sc")$y #
y2 <- stinterp(x,y,xo,method="st")$y #
y3 <- stinterp(x,y,xo,method="pa")$y #
ysp=spline(x,y,n=length(xo)) #
plot(x,y,ylim=c(-1.5,1.5)) #
points(xo,y1,cex=1/5,col=2) #
points(xo,y2,cex=1/5,col=3) #
points(xo,y3,cex=1/5,col=4) #
points(ysp,cex=1/5,col=5) #
#
legend(3, 1, c("Scaled Stineman", "Stineman", "Parabolic", "Spline"), col = #
c(2,3,4,5),lty=1) #
sens=c(0,48/51,46/51,44/51,33/51,1)#
#
sens=c(0,48/51,46/51,44/51,33/51,1)#
spec=c(1,33/58,39/58,45/58,56/58,0)#
x <- 1-spec#
y <- sens#
?stinterp#
stinterp(x,y)#
stinterp(x,y,(0,0))#
#
a=(0,0)#
stinterp(x,y,0)#
stinterp(x,y,1)#
stinterp(x,y,20)#
xo <- seq(0,2*pi,by=pi/150)#
xo <- seq(0,1,by=pi/150)#
x[1]#
x[2]#
x[3]#
x[4]#
x[5]#
x[6]#
order(x)#
x(order(x))#
x[order(x)]#
y[order(x)]#
x<-x[order(x)]#
y<-y[order(x)]#
stinterp(x,y,xo)#
y <- stinterp(x,y,xo)#
x<-x[order(x)]#
#
sens=c(0,48/51,46/51,44/51,33/51,1)#
spec=c(1,33/58,39/58,45/58,56/58,0)#
x <- 1-spec#
y <- sens#
#
x<-x[order(x)]#
y<-y[order(x)]#
#
t <- stinterp(x,y,xo)#
lines(xo,sin(xo))#
#
points(stinterp(x,y,xo),cex=1/5,col=3)#
#
sens=c(48/51,46/51,44/51,33/51)#
spec=c(33/58,39/58,45/58,56/58)#
x <- 1-spec#
y <- sens#
x#
y#
plot(x,y)#
plot(y,x)#
plot(x,y)#
#
a <- x[order(x)]#
a#
b <- y[order(x)]#
b#
plot(a,b)#
head(a)#
c <- c(0,a,1)#
c#
d <- c(0,b,1)#
plot(c,d)#
t#
xo#
points(stinterp(x,y,xo),cex=1/5,col=3)#
xo <- seq(0,1,by=pi/150000)#
points(stinterp(c,d,xo),cex=1/5,col=3)#
points(stinterp(c,d,xo),cex=1/5,col=3, main="ROC")#
plot(c,d, main="ROC")#
plot(c,d, main="ROC",xlab=express(1-spec(pi)))#
plot(c,d, main="ROC",xlab=expression(1-spec(pi)))#
plot(c,d, main="ROC",xlab=expression(1-spec(pi)),ylab=expression(sens(pi)))#
points(stinterp(c,d,xo),cex=1/5,col=2)#
library("stinepack")#
sens=c(48/51,46/51,44/51,33/51)#
spec=(33/58,39/58,45/58,56/58)#
x <- 1-spec#
y <- sens#
a <- c(0,x[order(x)],1)#
b <- c(0,y[order(x)],1)#
xo <- seq(0,1,by=pi/150000)#
plot(c,d, main="ROC",xlab=expression(1-spec(pi)),ylab=expression(sens(pi)))#
points(stinterp(c,d,xo),cex=1/5,col=2)#
po <- seq(0,1,by=0.01)#
plot((1-po)^2,1-po^2)#
plot((1-po)^2,1-po^2, lty="l")#
?plot#
plot((1-po)^2,1-po^2, type="l")#
ind <- list(c(1, 2, 2), c("A", "A", "B"))#
table(ind,1)#
?table#
tapply(1:3, ind, sum)#
table(1)#
table(2)#
table(2,2)#
table(2,3)#
table(c(2,1),c(3,1))#
table(c(1,2),c(1,3))#
table(c(1,2),c(2,3))#
tapply(1:3, ind)#
table(ind)#
table(c(1,1,1),c(2,2,2))#
table(c(1,1,1),c(2,2))#
table(c(1,1,1),c(2,2,3))#
ind#
mls#
?mls#
??mls#
?tapply#
??detach#
?detach#
install.packages(c("rj", "rj.gd"), repos="http://download.walware.de/rj-1.0")#
tmp <- installed.packages()#
tmp#
installedpkgs <- as.vector(tmp[is.na(tmp[,"Priority"]), 1])#
installedpkgs#
save(installedpkgs, file="installed_old.rda")#
rm -rf /Library/Frameworks/R.framework /Applications/R.app#
e#
?kde#
?#
KernSmooth#
install.packages("KernSmooth")#
a_0 <- 2, b_0 <- 12
rm(ls())
rm(list())
rm(list=ls())
a_0 <- 2, b_0 <- 12
a_1 <- 1, b_1 <- 1
n_0 <- c(7,14,28) # patients PBO
n_1 <- 28         # patients treatment
p_0 <- c(0.1,0.2,0.3)  # different value of prob for the PBO
delta <- c(0,0.2,0.4)  # delta for probability tratment
y_1 <- matrix(0,nrow=length(delta),2000)
p_1p <- matrix(0,nrow=length(delta),10000)
y_0 <- rbinom(2000,n_0[1],p_0[1]) # Drawn values for PBO
y_0
for (i in 1:length(delta)){
# For each value of p_0 I have 3 different values of p_1
y_1[i,] <- rbinom(2000,n_1,p_0[1]+delta[i])
for (l in 1:2000){
p_0p <- rbeta(10000,2+y_0[l],12+14-y_0[l])
p_1p[i,] <- rbeta(10000,1+y_1[i,l],1+28-y_1[i,l])
y_1[i,]
i
dim(p_0p)
length(p_0p)
dim(p_1p)
pp
pp[i,] <- pcent(delta_p[i,])
delta_p <- matrix(0,nrow=length(delta),10000)
pp <- matrix(0,nrow=3,1)
for (i in 1:3){
delta_p[i,] <- p_1p[i,]-p_0p
pos <- delta_p[delta_p>0]
pp[i,] <- length(pos[i,])/length(delta_p[i,])
}
pos
library(ARAMIS)#
    source("http://bioconductor.org/biocLite.R")#
    biocLite("cummeRbund")#
library(cummeRbund)#
ll#
ls#
ls(DetailsAnnotationTrack)#
ls("Desktop")#
ls("Desktop/")#
system("lL")#
getwd()#
class()#
system("ls")#
lm#
lm.fit#
ll#
ls#
ls()#
setwd("/Users/marcogarieri/Desktop/FAO/Natalia_Project/R_code/")#
#
rm(list=ls())#
gc()#
muTab <- read.csv("ExpectedValues.csv",row.names=1)#
#
n0<-read.csv("ValoriItalia.csv",header=TRUE,row.names=1)[,7]#
muTab <- muTab[,-(7:9)]#
bounds <- array(NA,c(dim(muTab),2))#
dimnames(bounds) <- c(dimnames(muTab),list(c("Lower","Upper")))#
bounds[,,1] <- as.matrix(read.csv("lowerBounds.csv",row.names=1))[,-(7:9)]#
bounds[,,2] <- as.matrix(read.csv("upperBounds.csv",row.names=1))[,-(7:9)]#
sampleTables <- function(n0,muTab, bounds,nIter=100,N=10000,controlCol=NULL,controlRow=NULL){#
	sdTab <- abs((bounds[,,2]-bounds[,,1])/2)#
	nr<-nrow(muTab)#
	nc<-ncol(muTab)#
	okTab <- array(NA,c(nr,nc,nIter))#
	if(is.null(controlRow)) controlRow <- do.call(rbind,lapply(1:nr,function(i){#
		fact <- 10#
		if(muTab[i,nc]==0) {#
			nc <- max(which(muTab[i,-nc]!=0))#
			fact <-1000#
			}#
		range(round(rnorm(N,muTab[i,nc],fact*sdTab[i,nc])))#
		}))#
	if(is.null(controlCol)) controlCol <- do.call(cbind,lapply(1:nc,function(j)range(round(rnorm(N,colSums(muTab),sqrt(colSums(sdTab^2)))))))#
	iter <- t <- 1#
	while(t <= nIter){#
		sim <- do.call(rbind,lapply(1:nr,function(i){#
			rrow <- rep(NA,nc)#
			repeat{#
				if(muTab[i,nc]==0){#
					nc <- max(which(muTab[i,-nc]!=0))#
					rrow[(1:length(rrow))>nc]<-0#
					rrow[-(nc:length(rrow))] <- round(unlist(muTab[i,-(nc:length(rrow))])+unlist(sdTab[i,-(nc:length(rrow))])*abs(rnorm(nc-1)),0)#
					rrow[nc] <- (n0[i]-sum(rrow[-(nc:length(rrow))]))#
					}else{#
						rrow[-nc] <- round(unlist(muTab[i,-nc])+unlist(sdTab[i,-nc])*abs(rnorm(nc-1)),0)#
						rrow[nc] <- (n0[i]-sum(rrow[-nc]))#
						}#
				}#
				cat("*")#
			return(rrow)#
			}))#
		cat("\n")#
		totCol <- colSums(sim)#
			okTab[,,t]<-sim#
			t <- t+1#
		iter <- iter + 1#
        }#
      return(list(tabs=okTab,iter=iter))#
	}#
tab <- sampleTables(n0,muTab,bounds)#
rm(list=ls())#
gc()#
setwd("C:/Users/natalia/Documents/FAO/script")#
require(msm)#
muTab <- read.csv("ExpectedValues.csv",row.names=1)#
n0<-read.csv("ValoriItalia.csv",header=TRUE,row.names=1)[,7]#
n0#
muTab <- muTab[,-(7:9)]#
muTab#
bounds <- array(NA,c(dim(muTab),2))#
dimnames(bounds) <- c(dimnames(muTab),list(c("Lower","Upper")))#
bounds[,,1] <- as.matrix(read.csv("lowerBounds.csv",row.names=1,sep=';'))#
bounds[,,2] <- as.matrix(read.csv("upperBounds.csv",row.names=1,sep=';'))#
range(rtnorm(1000, mean=9210, sd=100, lower=9026, upper=9394))#
par(mfrow=c(2,2))#
hist(rtnorm(1000, mean=9210, sd=10, lower=9026, upper=9394))#
hist(rtnorm(1000, mean=9210, sd=100, lower=9026, upper=9394))#
hist(rtnorm(1000, mean=9210, sd=1000, lower=9026, upper=9394))#
hist(rtnorm(1000, mean=9210, sd=10000, lower=9026, upper=9394))#
sampleTables <- function(n0,muTab, bounds,nIter=100,N=10000,controlCol=NULL,controlRow=NULL){#
	sdTab <- abs((bounds[,,2]-bounds[,,1])/2)#
	nr<-nrow(muTab)#
	nc<-ncol(muTab)#
	okTab <- array(NA,c(nr,nc,nIter))#
	if(is.null(controlRow)) controlRow <- do.call(rbind,lapply(1:nr,function(i){#
		fact <- 10#
		if(muTab[i,nc]==0) {#
			nc <- max(which(muTab[i,-nc]!=0))#
			fact <-1000#
			}#
		range(round(rnorm(N,muTab[i,nc],fact*sdTab[i,nc])))#
		}))#
	if(is.null(controlCol)) controlCol <- do.call(cbind,lapply(1:nc,function(j)range(round(rnorm(N,colSums(muTab),sqrt(colSums(sdTab^2)))))))#
	iter <- t <- 1#
	while(t <= nIter){#
		sim <- do.call(rbind,lapply(1:nr,function(i){#
			rrow <- rep(NA,nc)#
			repeat{#
				if(muTab[i,nc]==0){#
					nc <- max(which(muTab[i,-nc]!=0))#
					rrow[(1:length(rrow))>nc]<-0#
					rrow[-(nc:length(rrow))] <- round(unlist(muTab[i,-(nc:length(rrow))])+unlist(sdTab[i,-(nc:length(rrow))])*abs(rnorm(nc-1)),0)#
					rrow[nc] <- (n0[i]-sum(rrow[-(nc:length(rrow))]))#
					}else{#
						rrow[-nc] <- round(unlist(muTab[i,-nc])+unlist(sdTab[i,-nc])*abs(rnorm(nc-1)),0)#
						rrow[nc] <- (n0[i]-sum(rrow[-nc]))#
						}#
				break#
				}#
				cat("*")#
			return(rrow)#
			}))#
		cat("\n")#
		totCol <- colSums(sim)#
			okTab[,,t]<-sim#
			t <- t+1#
		iter <- iter + 1#
        }#
      return(list(tabs=okTab,iter=iter))#
	}#
tab <- sampleTables(n0,muTab,bounds)#
n0#
setwd("/Users/marcogarieri/Dropbox/Sampling table/R_code/nuove prior/")#
require(msm)#
muTab <- read.csv("ExpectedValues.csv",row.names=1)#
n0<-read.csv("ValoriItalia.csv",header=TRUE,row.names=1)[,7]#
n0#
muTab <- muTab[,-(7:9)]#
muTab#
bounds <- array(NA,c(dim(muTab),2))#
dimnames(bounds) <- c(dimnames(muTab),list(c("Lower","Upper")))#
bounds[,,1] <- as.matrix(read.csv("lowerBounds.csv",row.names=1,sep=';'))#
bounds[,,2] <- as.matrix(read.csv("upperBounds.csv",row.names=1,sep=';'))#
range(rtnorm(1000, mean=9210, sd=100, lower=9026, upper=9394))#
par(mfrow=c(2,2))#
hist(rtnorm(1000, mean=9210, sd=10, lower=9026, upper=9394))#
hist(rtnorm(1000, mean=9210, sd=100, lower=9026, upper=9394))#
hist(rtnorm(1000, mean=9210, sd=1000, lower=9026, upper=9394))#
hist(rtnorm(1000, mean=9210, sd=10000, lower=9026, upper=9394))#
sampleTables <- function(n0,muTab, bounds,nIter=100,N=10000,controlCol=NULL,controlRow=NULL){#
	sdTab <- abs((bounds[,,2]-bounds[,,1])/2)#
	nr<-nrow(muTab)#
	nc<-ncol(muTab)#
	okTab <- array(NA,c(nr,nc,nIter))#
	if(is.null(controlRow)) controlRow <- do.call(rbind,lapply(1:nr,function(i){#
		fact <- 10#
		if(muTab[i,nc]==0) {#
			nc <- max(which(muTab[i,-nc]!=0))#
			fact <-1000#
			}#
		range(round(rnorm(N,muTab[i,nc],fact*sdTab[i,nc])))#
		}))#
	if(is.null(controlCol)) controlCol <- do.call(cbind,lapply(1:nc,function(j)range(round(rnorm(N,colSums(muTab),sqrt(colSums(sdTab^2)))))))#
	iter <- t <- 1#
	while(t <= nIter){#
		sim <- do.call(rbind,lapply(1:nr,function(i){#
			rrow <- rep(NA,nc)#
			repeat{#
				if(muTab[i,nc]==0){#
					nc <- max(which(muTab[i,-nc]!=0))#
					rrow[(1:length(rrow))>nc]<-0#
					rrow[-(nc:length(rrow))] <- round(unlist(muTab[i,-(nc:length(rrow))])+unlist(sdTab[i,-(nc:length(rrow))])*abs(rnorm(nc-1)),0)#
					rrow[nc] <- (n0[i]-sum(rrow[-(nc:length(rrow))]))#
					}else{#
						rrow[-nc] <- round(unlist(muTab[i,-nc])+unlist(sdTab[i,-nc])*abs(rnorm(nc-1)),0)#
						rrow[nc] <- (n0[i]-sum(rrow[-nc]))#
						}#
				break#
				}#
				cat("*")#
			return(rrow)#
			}))#
		cat("\n")#
		totCol <- colSums(sim)#
			okTab[,,t]<-sim#
			t <- t+1#
		iter <- iter + 1#
        }#
      return(list(tabs=okTab,iter=iter))#
	}#
tab <- sampleTables(n0,muTab,bounds)#
n0<-read.csv("ValoriItalia.csv",header=TRUE,row.names=1)[,7]#
n0<-read.csv("../ValoriItalia.csv",header=TRUE,row.names=1)[,7]#
dev.off()#
n0#
muTab <- muTab[,-(7:9)]#
muTab#
bounds <- array(NA,c(dim(muTab),2))#
dimnames(bounds) <- c(dimnames(muTab),list(c("Lower","Upper")))#
bounds[,,1] <- as.matrix(read.csv("lowerBounds.csv",row.names=1,sep=';'))#
bounds[,,2] <- as.matrix(read.csv("upperBounds.csv",row.names=1,sep=';'))#
range(rtnorm(1000, mean=9210, sd=100, lower=9026, upper=9394))#
par(mfrow=c(2,2))#
hist(rtnorm(1000, mean=9210, sd=10, lower=9026, upper=9394))#
hist(rtnorm(1000, mean=9210, sd=100, lower=9026, upper=9394))#
hist(rtnorm(1000, mean=9210, sd=1000, lower=9026, upper=9394))#
hist(rtnorm(1000, mean=9210, sd=10000, lower=9026, upper=9394))#
sampleTables <- function(n0,muTab, bounds,nIter=100,N=10000,controlCol=NULL,controlRow=NULL){#
	sdTab <- abs((bounds[,,2]-bounds[,,1])/2)#
	nr<-nrow(muTab)#
	nc<-ncol(muTab)#
	okTab <- array(NA,c(nr,nc,nIter))#
	if(is.null(controlRow)) controlRow <- do.call(rbind,lapply(1:nr,function(i){#
		fact <- 10#
		if(muTab[i,nc]==0) {#
			nc <- max(which(muTab[i,-nc]!=0))#
			fact <-1000#
			}#
		range(round(rnorm(N,muTab[i,nc],fact*sdTab[i,nc])))#
		}))#
	if(is.null(controlCol)) controlCol <- do.call(cbind,lapply(1:nc,function(j)range(round(rnorm(N,colSums(muTab),sqrt(colSums(sdTab^2)))))))#
	iter <- t <- 1#
	while(t <= nIter){#
		sim <- do.call(rbind,lapply(1:nr,function(i){#
			rrow <- rep(NA,nc)#
			repeat{#
				if(muTab[i,nc]==0){#
					nc <- max(which(muTab[i,-nc]!=0))#
					rrow[(1:length(rrow))>nc]<-0#
					rrow[-(nc:length(rrow))] <- round(unlist(muTab[i,-(nc:length(rrow))])+unlist(sdTab[i,-(nc:length(rrow))])*abs(rnorm(nc-1)),0)#
					rrow[nc] <- (n0[i]-sum(rrow[-(nc:length(rrow))]))#
					}else{#
						rrow[-nc] <- round(unlist(muTab[i,-nc])+unlist(sdTab[i,-nc])*abs(rnorm(nc-1)),0)#
						rrow[nc] <- (n0[i]-sum(rrow[-nc]))#
						}#
				break#
				}#
				cat("*")#
			return(rrow)#
			}))#
		cat("\n")#
		totCol <- colSums(sim)#
			okTab[,,t]<-sim#
			t <- t+1#
		iter <- iter + 1#
        }#
      return(list(tabs=okTab,iter=iter))#
	}#
tab <- sampleTables(n0,muTab,bounds)#
require(msm)#
muTab <- read.csv("ExpectedValues.csv",row.names=1)#
n0<-read.csv("../ValoriItalia.csv",header=TRUE,row.names=1)[,7]#
n0#
muTab <- muTab[,-(7:9)]#
muTab#
bounds <- array(NA,c(dim(muTab),2))#
dimnames(bounds) <- c(dimnames(muTab),list(c("Lower","Upper")))#
bounds[,,1] <- as.matrix(read.csv("lowerBounds.csv",row.names=1,sep=';'))#
bounds[,,2] <- as.matrix(read.csv("upperBounds.csv",row.names=1,sep=';'))#
range(rtnorm(1000, mean=9210, sd=100, lower=9026, upper=9394))#
par(mfrow=c(2,2))#
hist(rtnorm(1000, mean=9210, sd=10, lower=9026, upper=9394))#
hist(rtnorm(1000, mean=9210, sd=100, lower=9026, upper=9394))#
hist(rtnorm(1000, mean=9210, sd=1000, lower=9026, upper=9394))#
hist(rtnorm(1000, mean=9210, sd=10000, lower=9026, upper=9394))#
sampleTables <- function(n0,muTab, bounds,nIter=100,N=10000,controlCol=NULL,controlRow=NULL){#
	sdTab <- abs((bounds[,,2]-bounds[,,1])/2)#
	nr<-nrow(muTab)#
	nc<-ncol(muTab)#
	okTab <- array(NA,c(nr,nc,nIter))#
	if(is.null(controlRow)) controlRow <- do.call(rbind,lapply(1:nr,function(i){#
		fact <- 10#
		if(muTab[i,nc]==0) {#
			nc <- max(which(muTab[i,-nc]!=0))#
			fact <-1000#
			}#
		range(round(rnorm(N,muTab[i,nc],fact*sdTab[i,nc])))#
		}))#
	if(is.null(controlCol)) controlCol <- do.call(cbind,lapply(1:nc,function(j)range(round(rnorm(N,colSums(muTab),sqrt(colSums(sdTab^2)))))))#
	iter <- t <- 1#
	while(t <= nIter){#
		sim <- do.call(rbind,lapply(1:nr,function(i){#
			rrow <- rep(NA,nc)#
			repeat{#
				if(muTab[i,nc]==0){#
					nc <- max(which(muTab[i,-nc]!=0))#
					rrow[(1:length(rrow))>nc]<-0#
					rrow[-(nc:length(rrow))] <- round(unlist(muTab[i,-(nc:length(rrow))])+unlist(sdTab[i,-(nc:length(rrow))])*abs(rnorm(nc-1)),0)#
					rrow[nc] <- (n0[i]-sum(rrow[-(nc:length(rrow))]))#
					}else{#
						rrow[-nc] <- round(unlist(muTab[i,-nc])+unlist(sdTab[i,-nc])*abs(rnorm(nc-1)),0)#
						rrow[nc] <- (n0[i]-sum(rrow[-nc]))#
						}#
				break#
				}#
				cat("*")#
			return(rrow)#
			}))#
		cat("\n")#
		totCol <- colSums(sim)#
			okTab[,,t]<-sim#
			t <- t+1#
		iter <- iter + 1#
        }#
      return(list(tabs=okTab,iter=iter))#
	}#
tab <- sampleTables(n0,muTab,bounds)#
colMeans(do.call(rbind,lapply(1:dim(tab[[1]])[3],function(t)tab[[1]][,,t])))#
summary(do.call(rbind,lapply(1:dim(tab[[1]])[3],function(t)tab[[1]][,6,t])))#
i#
?rnorm#
round(9210+10*abs(rnorm(10)),0)#
hust(round(9210+10*abs(rnorm(10)),0))#
hist(round(9210+10*abs(rnorm(10)),0))#
hist(round(9210+10*abs(rnorm(1000)),0))#
hist(round(9210+10*abs(rnorm(10000)),0))#
hist(round(9210+100*abs(rnorm(10000)),0))#
hist(rtnorm(1000, mean=9210, sd=10000, lower=9026, upper=9394))#
hist(rtnorm(1000, mean=9210, sd=10, lower=9026, upper=9394))#
hist(round(9210+1000*abs(rnorm(10000)),0))#
hist(round(9210+10000*abs(rnorm(10000)),0))#
require(msm)#
muTab <- read.csv("ExpectedValues.csv",row.names=1)#
n0<-read.csv("../ValoriItalia.csv",header=TRUE,row.names=1)[,7]#
n0#
muTab <- muTab[,-(7:9)]#
muTab#
bounds <- array(NA,c(dim(muTab),2))#
dimnames(bounds) <- c(dimnames(muTab),list(c("Lower","Upper")))#
bounds[,,1] <- as.matrix(read.csv("lowerBounds.csv",row.names=1,sep=';'))#
bounds[,,2] <- as.matrix(read.csv("upperBounds.csv",row.names=1,sep=';'))#
range(rtnorm(1000, mean=9210, sd=100, lower=9026, upper=9394))#
par(mfrow=c(2,2))#
hist(rtnorm(1000, mean=9210, sd=10, lower=9026, upper=9394))#
hist(rtnorm(1000, mean=9210, sd=100, lower=9026, upper=9394))#
hist(rtnorm(1000, mean=9210, sd=1000, lower=9026, upper=9394))#
hist(rtnorm(1000, mean=9210, sd=10000, lower=9026, upper=9394))#
hist(round(9210+1000*abs(rnorm(10000)),0))#
	sdTab <- abs((bounds[,,2]-bounds[,,1])/2)#
	nr<-nrow(muTab)#
	nc<-ncol(muTab)#
	okTab <- array(NA,c(nr,nc,nIter))#
	if(is.null(controlRow)) controlRow <- do.call(rbind,lapply(1:nr,function(i){#
		fact <- 10#
		if(muTab[i,nc]==0) {#
			nc <- max(which(muTab[i,-nc]!=0))#
			fact <-1000#
			}#
		range(round(rnorm(N,muTab[i,nc],fact*sdTab[i,nc])))#
		}))#
	if(is.null(controlCol)) controlCol <- do.call(cbind,lapply(1:nc,function(j)range(round(rnorm(N,colSums(muTab),sqrt(colSums(sdTab^2)))))))#
	iter <- t <- 1#
			repeat{#
}#
#
)#
#
)#
kdsj'#
#
)#
kdsj'#
k';lk#
			rrow <- rep(NA,nc)#
muTab[i,nc]==0#
if(muTab[i,nc]==0)#
k;''#
l';k#
'lk'lk#
require(msm)#
muTab <- read.csv("ExpectedValues.csv",row.names=1)#
n0<-read.csv("../ValoriItalia.csv",header=TRUE,row.names=1)[,7]#
n0#
muTab <- muTab[,-(7:9)]#
muTab#
bounds <- array(NA,c(dim(muTab),2))#
dimnames(bounds) <- c(dimnames(muTab),list(c("Lower","Upper")))#
bounds[,,1] <- as.matrix(read.csv("lowerBounds.csv",row.names=1,sep=';'))#
bounds[,,2] <- as.matrix(read.csv("upperBounds.csv",row.names=1,sep=';'))#
require(msm)#
muTab <- read.csv("ExpectedValues.csv",row.names=1)#
n0<-read.csv("ValoriItalia.csv",header=TRUE,row.names=1)[,7]#
n0#
muTab <- muTab[,-(7:9)]#
muTab#
sampleTables <- function(n0,muTab, bounds,nIter=100,N=10000,controlCol=NULL,controlRow=NULL,sdev=10){#
	sdTab <- abs((bounds[,,2]-bounds[,,1])/2)#
	nr<-nrow(muTab)#
	nc<-ncol(muTab)#
	okTab <- array(NA,c(nr,nc,nIter))#
	if(is.null(controlRow)) controlRow <- do.call(rbind,lapply(1:nr,function(i){#
		fact <- 10#
		if(muTab[i,nc]==0) {#
			nc <- max(which(muTab[i,-nc]!=0))#
			fact <-1000#
			}#
		range(round(rnorm(N,muTab[i,nc],fact*sdTab[i,nc])))#
		}))#
	if(is.null(controlCol)) controlCol <- do.call(cbind,lapply(1:nc,function(j)range(round(rnorm(N,colSums(muTab),sqrt(colSums(sdTab^2)))))))#
	iter <- t <- 1#
	while(t <= nIter){#
		sim <- do.call(rbind,lapply(1:nr,function(i){#
			rrow <- rep(NA,nc)#
			repeat{#
				if(muTab[i,nc]==0){#
					nc <- max(which(muTab[i,-nc]!=0))#
					rrow[(1:length(rrow))>nc]<-0#
					rrow[-(nc:length(rrow))] <- round(rtnorm(nc-1, mean=unlist(muTab[i,-(nc:length(rrow))]), sd=sdev, lower=bounds[i,-(nc:length(rrow)),1],upper=bounds[i,-(nc:length(rrow)),2]),0)#
					rrow[nc] <- -(n0[i]-sum(rrow[-(nc:length(rrow))]))#
					}else{#
						rrow[-(nc:length(rrow))] <- round(rtnorm(nc-1, mean=unlist(muTab[i,-nc]), sd=sdev, lower=bounds[i,-nc,1],upper=bounds[i,-nc,2]),0)#
						rrow[nc] <- (n0[i]-sum(rrow[-nc]))#
						}#
				break#
				}#
				cat("*")#
			return(rrow)#
			}))#
		cat("\n")#
		totCol <- colSums(sim)#
			okTab[,,t]<-sim#
			t <- t+1#
		iter <- iter + 1#
        }#
      return(list(tabs=okTab,iter=iter))#
	}#
tab <- sampleTables(n0,muTab,bounds)#
9210+12940+122#
9210+12940+122+624+833#
sampleTables <- function(n0,muTab, bounds,nIter=100,N=10000,controlCol=NULL,controlRow=NULL,sdev=10){#
	sdTab <- abs((bounds[,,2]-bounds[,,1])/2)#
	nr<-nrow(muTab)#
	nc<-ncol(muTab)#
	okTab <- array(NA,c(nr,nc,nIter))#
	if(is.null(controlRow)) controlRow <- do.call(rbind,lapply(1:nr,function(i){#
		fact <- 10#
		if(muTab[i,nc]==0) {#
			nc <- max(which(muTab[i,-nc]!=0))#
			fact <-1000#
			}#
		range(round(rnorm(N,muTab[i,nc],fact*sdTab[i,nc])))#
		}))#
	if(is.null(controlCol)) controlCol <- do.call(cbind,lapply(1:nc,function(j)range(round(rnorm(N,colSums(muTab),sqrt(colSums(sdTab^2)))))))#
	iter <- t <- 1#
	while(t <= nIter){#
		sim <- do.call(rbind,lapply(1:nr,function(i){#
			rrow <- rep(NA,nc)#
			repeat{#
				if(muTab[i,nc]==0){#
					nc <- max(which(muTab[i,-nc]!=0))#
					rrow[(1:length(rrow))>nc]<-0#
					rrow[-(nc:length(rrow))] <- round(rtnorm(nc-1, mean=unlist(muTab[i,-(nc:length(rrow))]), sd=sdev, lower=bounds[i,-(nc:length(rrow)),1],upper=bounds[i,-(nc:length(rrow)),2]),0)#
					rrow[nc] <- (n0[i]-sum(rrow[-(nc:length(rrow))]))#
					}else{ #
						rrow[-(nc:length(rrow))] <- round(rtnorm(nc-1, mean=unlist(muTab[i,-nc]), sd=sdev, lower=bounds[i,-nc,1],upper=bounds[i,-nc,2]),0)#
						rrow[nc] <- -(n0[i]-sum(rrow[-nc]))#
						}#
				break#
				}#
				cat("*")#
			return(rrow)#
			}))#
		cat("\n")#
		totCol <- colSums(sim)#
			okTab[,,t]<-sim#
			t <- t+1#
		iter <- iter + 1#
        }#
      return(list(tabs=okTab,iter=iter))#
	}#
tab <- sampleTables(n0,muTab,bounds)#
8380+ 6+6965#
8380+ 6+6965-90#
8383+6+6971#
8383+6+ 6971+514#
8383+6+6971+514#
5218+1+16#
11215+ 708+ 12#
bounds#
require(msm)#
muTab <- read.csv("ExpectedValues.csv",row.names=1)#
n0<-read.csv("ValoriItalia.csv",header=TRUE,row.names=1)[,7]#
n0#
muTab <- muTab[,-(7:9)]#
muTab#
bounds <- array(NA,c(dim(muTab),2))#
dimnames(bounds) <- c(dimnames(muTab),list(c("Lower","Upper")))#
bounds[,,1] <- as.matrix(read.csv("lowerBounds.csv",row.names=1,sep=';'))#
bounds[,,2] <- as.matrix(read.csv("upperBounds.csv",row.names=1,sep=';'))#
sampleTables <- function(n0,muTab, bounds,nIter=100,N=10000,controlCol=NULL,controlRow=NULL,sdev=10){#
	sdTab <- abs((bounds[,,2]-bounds[,,1])/2)#
	nr<-nrow(muTab)#
	nc<-ncol(muTab)#
	okTab <- array(NA,c(nr,nc,nIter))#
	if(is.null(controlRow)) controlRow <- do.call(rbind,lapply(1:nr,function(i){#
		fact <- 10#
		if(muTab[i,nc]==0) {#
			nc <- max(which(muTab[i,-nc]!=0))#
			fact <-1000#
			}#
		range(round(rnorm(N,muTab[i,nc],fact*sdTab[i,nc])))#
		}))#
	if(is.null(controlCol)) controlCol <- do.call(cbind,lapply(1:nc,function(j)range(round(rnorm(N,colSums(muTab),sqrt(colSums(sdTab^2)))))))#
	iter <- t <- 1#
	while(t <= nIter){#
		sim <- do.call(rbind,lapply(1:nr,function(i){#
			rrow <- rep(NA,nc)#
			repeat{#
				if(muTab[i,nc]==0){#
					nc <- max(which(muTab[i,-nc]!=0))#
					rrow[(1:length(rrow))>nc]<-0#
					rrow[-(nc:length(rrow))] <- round(rtnorm(nc-1, mean=unlist(muTab[i,-(nc:length(rrow))]), sd=sdev, lower=bounds[i,-(nc:length(rrow)),1],upper=bounds[i,-(nc:length(rrow)),2]),0)#
					rrow[nc] <- (n0[i]-sum(rrow[-(nc:length(rrow))]))#
					}else{ #
						rrow[-(nc:length(rrow))] <- round(rtnorm(nc-1, mean=unlist(muTab[i,-nc]), sd=sdev, lower=bounds[i,-nc,1],upper=bounds[i,-nc,2]),0)#
						rrow[nc] <- -(n0[i]-sum(rrow[-nc]))#
						}#
				break#
				}#
				cat("*")#
			return(rrow)#
			}))#
		cat("\n")#
		totCol <- colSums(sim)#
			okTab[,,t]<-sim#
			t <- t+1#
		iter <- iter + 1#
        }#
      return(list(tabs=okTab,iter=iter))#
	}#
tab <- sampleTables(n0,muTab,bounds)#
rm(list=ls())#
gc()#
setwd("C:/Users/natalia/Documents/FAO/script")#
require(msm)#
getwd()#
require(msm)#
muTab <- read.csv("ExpectedValues.csv",row.names=1,sep=";")#
muTab#
n0<-read.csv("ExpectedValues.csv",header=TRUE,row.names=1,sep=";")[,8]#
n0#
muTab <- muTab[,-(7:8)]#
muTab#
bounds <- array(NA,c(dim(muTab),2))#
dimnames(bounds) <- c(dimnames(muTab),list(c("Lower","Upper")))#
bounds[,,1] <- as.matrix(read.csv("lowerBounds.csv",row.names=1,sep=';'))#
bounds[,,2] <- as.matrix(read.csv("upperBounds.csv",row.names=1,sep=';'))#
#
sampleTables <- function(n0,muTab, bounds,nIter=100,N=10000,controlCol=NULL,controlRow=NULL,sdev=10){#
	sdTab <- abs((bounds[,,2]-bounds[,,1])/2)#
	nr<-nrow(muTab)#
	nc<-ncol(muTab)#
	okTab <- array(NA,c(nr,nc,nIter))#
	if(is.null(controlRow)) controlRow <- do.call(rbind,lapply(1:nr,function(i){#
		fact <- 10#
		if(muTab[i,nc]==0) {#
			nc <- max(which(muTab[i,-nc]!=0))#
			fact <-1000#
			}#
		range(round(rnorm(N,muTab[i,nc],fact*sdTab[i,nc])))#
		}))#
	if(is.null(controlCol)) controlCol <- do.call(cbind,lapply(1:nc,function(j)range(round(rnorm(N,colSums(muTab),sqrt(colSums(sdTab^2)))))))#
	iter <- t <- 1#
	while(t <= nIter){#
		sim <- do.call(rbind,lapply(1:nr,function(i){#
			rrow <- rep(NA,nc)#
			repeat{#
				if(muTab[i,nc]==0){#
					nc <- max(which(muTab[i,-nc]!=0))#
					rrow[(1:length(rrow))>nc]<-0#
					rrow[-(nc:length(rrow))] <- round(rtnorm(nc-1, mean=unlist(muTab[i,-(nc:length(rrow))]), sd=sdev, lower=bounds[i,-(nc:length(rrow)),1],upper=bounds[i,-(nc:length(rrow)),2]),0)#
					rrow[nc] <- (n0[i]-sum(rrow[-(nc:length(rrow))]))#
					}else{ #
						rrow[-(nc:length(rrow))] <- round(rtnorm(nc-1, mean=unlist(muTab[i,-nc]), sd=sdev, lower=bounds[i,-nc,1],upper=bounds[i,-nc,2]),0)#
						rrow[nc] <- -(n0[i]-sum(rrow[-nc]))#
						}#
				if(rrow[nc]>=min(controlRow[i,]) & rrow[nc]<=max(controlRow[i,])) break#
				}#
				cat("*")#
			return(rrow)#
			}))#
		cat("\n")#
		totCol <- colSums(sim)#
		cond <- sapply(1:nc,function(j)(totCol[j]>=controlCol[1,j] & totCol[j]<=controlCol[2,j]))#
		if(all(cond)){#
			okTab[,,t]<-sim#
			t <- t+1#
			print(t)#
			}#
		iter <- iter + 1#
        }#
      return(list(tabs=okTab,iter=iter))#
	}#
tab <- sampleTables(n0,muTab,bounds)#
sampleTables <- function(n0,muTab, bounds,nIter=100,N=10000,controlCol=NULL,controlRow=NULL,sdev=10){#
	sdTab <- abs((bounds[,,2]-bounds[,,1])/2)#
	nr<-nrow(muTab)#
	nc<-ncol(muTab)#
	okTab <- array(NA,c(nr,nc,nIter))#
	if(is.null(controlRow)) controlRow <- do.call(rbind,lapply(1:nr,function(i){#
		fact <- 10#
		if(muTab[i,nc]==0) {#
			nc <- max(which(muTab[i,-nc]!=0))#
			fact <-1000#
			}#
		range(round(rnorm(N,muTab[i,nc],fact*sdTab[i,nc])))#
		}))#
	if(is.null(controlCol)) controlCol <- do.call(cbind,lapply(1:nc,function(j)range(round(rnorm(N,colSums(muTab),sqrt(colSums(sdTab^2)))))))#
	iter <- t <- 1#
	while(t <= nIter){#
		sim <- do.call(rbind,lapply(1:nr,function(i){#
			rrow <- rep(NA,nc)#
			repeat{#
				if(muTab[i,nc]==0){#
					nc <- max(which(muTab[i,-nc]!=0))#
					rrow[(1:length(rrow))>nc]<-0#
					rrow[-(nc:length(rrow))] <- round(rtnorm(nc-1, mean=unlist(muTab[i,-(nc:length(rrow))]), sd=sdev, lower=bounds[i,-(nc:length(rrow)),1],upper=bounds[i,-(nc:length(rrow)),2]),0)#
					rrow[nc] <- (n0[i]-sum(rrow[-(nc:length(rrow))]))#
					}else{ #
						rrow[-(nc:length(rrow))] <- round(rtnorm(nc-1, mean=unlist(muTab[i,-nc]), sd=sdev, lower=bounds[i,-nc,1],upper=bounds[i,-nc,2]),0)#
						rrow[nc] <- -(n0[i]-sum(rrow[-nc]))#
						}#
				if(rrow[nc]>=min(controlRow[i,]) & rrow[nc]<=max(controlRow[i,])){#
					break#
					cat("err")}#
				}#
				cat("*")#
			return(rrow)#
			}))#
		cat("\n")#
		totCol <- colSums(sim)#
		cond <- sapply(1:nc,function(j)(totCol[j]>=controlCol[1,j] & totCol[j]<=controlCol[2,j]))#
		if(all(cond)){#
			okTab[,,t]<-sim#
			t <- t+1#
			print(t)#
			}#
		iter <- iter + 1#
        }#
      return(list(tabs=okTab,iter=iter))#
	}#
tab <- sampleTables(n0,muTab,bounds)#
tab#
sampleTables <- function(n0,muTab, bounds,nIter=100,N=10000,controlCol=NULL,controlRow=NULL,sdev=10){#
	sdTab <- abs((bounds[,,2]-bounds[,,1])/2)#
	nr<-nrow(muTab)#
	nc<-ncol(muTab)#
	okTab <- array(NA,c(nr,nc,nIter))#
	if(is.null(controlRow)) controlRow <- do.call(rbind,lapply(1:nr,function(i){#
		fact <- 10#
		if(muTab[i,nc]==0) {#
			nc <- max(which(muTab[i,-nc]!=0))#
			fact <-1000#
			}#
		range(round(rnorm(N,muTab[i,nc],fact*sdTab[i,nc])))#
		}))#
	if(is.null(controlCol)) controlCol <- do.call(cbind,lapply(1:nc,function(j)range(round(rnorm(N,colSums(muTab),sqrt(colSums(sdTab^2)))))))#
	iter <- t <- 1#
	while(t <= nIter){#
		sim <- do.call(rbind,lapply(1:nr,function(i){#
			rrow <- rep(NA,nc)#
			repeat{#
				if(muTab[i,nc]==0){#
					nc <- max(which(muTab[i,-nc]!=0))#
					rrow[(1:length(rrow))>nc]<-0#
					rrow[-(nc:length(rrow))] <- round(rtnorm(nc-1, mean=unlist(muTab[i,-(nc:length(rrow))]), sd=sdev, lower=bounds[i,-(nc:length(rrow)),1],upper=bounds[i,-(nc:length(rrow)),2]),0)#
					rrow[nc] <- (n0[i]-sum(rrow[-(nc:length(rrow))]))#
					}else{ #
						rrow[-(nc:length(rrow))] <- round(rtnorm(nc-1, mean=unlist(muTab[i,-nc]), sd=sdev, lower=bounds[i,-nc,1],upper=bounds[i,-nc,2]),0)#
						rrow[nc] <- -(n0[i]-sum(rrow[-nc]))#
						}#
				if(rrow[nc]>=min(controlRow[i,]) & rrow[nc]<=max(controlRow[i,])){#
					break#
					cat("err")}#
				}#
				cat("*")#
			return(rrow)#
			}))#
		cat("\n")#
		totCol <- colSums(sim)#
		cond <- sapply(1:nc,function(j)(totCol[j]>=controlCol[1,j] & totCol[j]<=controlCol[2,j]))#
		if(all(cond)){#
			okTab[,,t]<-sim#
			t <- t+1#
			print(t)#
			}#
		iter <- iter + 1#
        }#
      return(list(tabs=okTab,iter=iter))#
	}#
tab <- sampleTables(n0,muTab,bounds)#
sampleTables <- function(n0,muTab, bounds,nIter=100,N=10000,controlCol=NULL,controlRow=NULL,sdev=100){#
	sdTab <- abs((bounds[,,2]-bounds[,,1])/2)#
	nr<-nrow(muTab)#
	nc<-ncol(muTab)#
	okTab <- array(NA,c(nr,nc,nIter))#
	if(is.null(controlRow)) controlRow <- do.call(rbind,lapply(1:nr,function(i){#
		fact <- 10#
		if(muTab[i,nc]==0) {#
			nc <- max(which(muTab[i,-nc]!=0))#
			fact <-1000#
			}#
		range(round(rnorm(N,muTab[i,nc],fact*sdTab[i,nc])))#
		}))#
	if(is.null(controlCol)) controlCol <- do.call(cbind,lapply(1:nc,function(j)range(round(rnorm(N,colSums(muTab),sqrt(colSums(sdTab^2)))))))#
	iter <- t <- 1#
	while(t <= nIter){#
		sim <- do.call(rbind,lapply(1:nr,function(i){#
			rrow <- rep(NA,nc)#
			repeat{#
				if(muTab[i,nc]==0){#
					nc <- max(which(muTab[i,-nc]!=0))#
					rrow[(1:length(rrow))>nc]<-0#
					rrow[-(nc:length(rrow))] <- round(rtnorm(nc-1, mean=unlist(muTab[i,-(nc:length(rrow))]), sd=sdev, lower=bounds[i,-(nc:length(rrow)),1],upper=bounds[i,-(nc:length(rrow)),2]),0)#
					rrow[nc] <- (n0[i]-sum(rrow[-(nc:length(rrow))]))#
					}else{ #
						rrow[-(nc:length(rrow))] <- round(rtnorm(nc-1, mean=unlist(muTab[i,-nc]), sd=sdev, lower=bounds[i,-nc,1],upper=bounds[i,-nc,2]),0)#
						rrow[nc] <- -(n0[i]-sum(rrow[-nc]))#
						}#
				if(rrow[nc]>=min(controlRow[i,]) & rrow[nc]<=max(controlRow[i,])){#
					break#
					cat("err")#
					}#
				}#
				cat("*")#
			return(rrow)#
			}))#
		cat("\n")#
		totCol <- colSums(sim)#
		cond <- sapply(1:nc,function(j)(totCol[j]>=controlCol[1,j] & totCol[j]<=controlCol[2,j]))#
		if(all(cond)){#
			okTab[,,t]<-sim#
			t <- t+1#
			print(t)#
			}#
		iter <- iter + 1#
        }#
      return(list(tabs=okTab,iter=iter))#
	}#
tab <- sampleTables(n0,muTab,bounds)#
sampleTables <- function(n0,muTab, bounds,nIter=100,N=10000,controlCol=NULL,controlRow=NULL,sdev=100){#
	sdTab <- abs((bounds[,,2]-bounds[,,1])/2)#
	nr<-nrow(muTab)#
	nc<-ncol(muTab)#
	okTab <- array(NA,c(nr,nc,nIter))#
	if(is.null(controlRow)) controlRow <- do.call(rbind,lapply(1:nr,function(i){#
		fact <- 10#
		if(muTab[i,nc]==0) {#
			nc <- max(which(muTab[i,-nc]!=0))#
			fact <-1000#
			}#
		range(round(rnorm(N,muTab[i,nc],fact*sdTab[i,nc])))#
		}))#
	if(is.null(controlCol)) controlCol <- do.call(cbind,lapply(1:nc,function(j)range(round(rnorm(N,colSums(muTab),sqrt(colSums(sdTab^2)))))))#
	iter <- t <- 1#
	while(t <= nIter){#
		sim <- do.call(rbind,lapply(1:nr,function(i){#
			rrow <- rep(NA,nc)#
			repeat{#
				if(muTab[i,nc]==0){#
					nc <- max(which(muTab[i,-nc]!=0))#
					rrow[(1:length(rrow))>nc]<-0#
					rrow[-(nc:length(rrow))] <- round(rtnorm(nc-1, mean=unlist(muTab[i,-(nc:length(rrow))]), sd=sdev, lower=bounds[i,-(nc:length(rrow)),1],upper=bounds[i,-(nc:length(rrow)),2]),0)#
					rrow[nc] <- (n0[i]-sum(rrow[-(nc:length(rrow))]))#
					}else{ #
						rrow[-(nc:length(rrow))] <- round(rtnorm(nc-1, mean=unlist(muTab[i,-nc]), sd=sdev, lower=bounds[i,-nc,1],upper=bounds[i,-nc,2]),0)#
						rrow[nc] <- -(n0[i]-sum(rrow[-nc]))#
						}#
				if(rrow[nc]>=min(controlRow[i,]) & rrow[nc]<=max(controlRow[i,])){#
					cat("err")					#
					break#
#
					}#
				}#
				cat("*")#
			return(rrow)#
			}))#
		cat("\n")#
		totCol <- colSums(sim)#
		cond <- sapply(1:nc,function(j)(totCol[j]>=controlCol[1,j] & totCol[j]<=controlCol[2,j]))#
		if(all(cond)){#
			okTab[,,t]<-sim#
			t <- t+1#
			print(t)#
			}#
		iter <- iter + 1#
        }#
      return(list(tabs=okTab,iter=iter))#
	}#
tab <- sampleTables(n0,muTab,bounds)#
sampleTables <- function(n0,muTab, bounds,nIter=100,N=10000,controlCol=NULL,controlRow=NULL,sdev=10){#
	sdTab <- abs((bounds[,,2]-bounds[,,1])/2)#
	nr<-nrow(muTab)#
	nc<-ncol(muTab)#
	okTab <- array(NA,c(nr,nc,nIter))#
	if(is.null(controlRow)) controlRow <- do.call(rbind,lapply(1:nr,function(i){#
		fact <- 10#
		if(muTab[i,nc]==0) {#
			nc <- max(which(muTab[i,-nc]!=0))#
			fact <-1000#
			}#
		range(round(rnorm(N,muTab[i,nc],fact*sdTab[i,nc])))#
		}))#
	if(is.null(controlCol)) controlCol <- do.call(cbind,lapply(1:nc,function(j)range(round(rnorm(N,colSums(muTab),sqrt(colSums(sdTab^2)))))))#
	iter <- t <- 1#
	while(t <= nIter){#
		sim <- do.call(rbind,lapply(1:nr,function(i){#
			rrow <- rep(NA,nc)#
			repeat{#
				if(muTab[i,nc]==0){#
					nc <- max(which(muTab[i,-nc]!=0))#
					rrow[(1:length(rrow))>nc]<-0#
					rrow[-(nc:length(rrow))] <- round(rtnorm(nc-1, mean=unlist(muTab[i,-(nc:length(rrow))]), sd=sdev, lower=bounds[i,-(nc:length(rrow)),1],upper=bounds[i,-(nc:length(rrow)),2]),0)#
					rrow[nc] <- (n0[i]-sum(rrow[-(nc:length(rrow))]))#
					}else{ #
						rrow[-(nc:length(rrow))] <- round(rtnorm(nc-1, mean=unlist(muTab[i,-nc]), sd=sdev, lower=bounds[i,-nc,1],upper=bounds[i,-nc,2]),0)#
						rrow[nc] <- -(n0[i]-sum(rrow[-nc]))#
						}#
				if(rrow[nc]>=min(controlRow[i,]) & rrow[nc]<=max(controlRow[i,])){#
					cat("err")					#
					break#
#
					}#
				}#
				cat("*")#
			return(rrow)#
			}))#
		cat("\n")#
		totCol <- colSums(sim)#
		cond <- sapply(1:nc,function(j)(totCol[j]>=controlCol[1,j] & totCol[j]<=controlCol[2,j]))#
		if(all(cond)){#
			okTab[,,t]<-sim#
			t <- t+1#
			print(t)#
			}#
		iter <- iter + 1#
        }#
      return(list(tabs=okTab,iter=iter))#
	}#
tab <- sampleTables(n0,muTab,bounds)#
sampleTables <- function(n0,muTab, bounds,nIter=100,N=10000,controlCol=NULL,controlRow=NULL,sdev=10){#
	sdTab <- abs((bounds[,,2]-bounds[,,1])/2)#
	nr<-nrow(muTab)#
	nc<-ncol(muTab)#
	okTab <- array(NA,c(nr,nc,nIter))#
	if(is.null(controlRow)) controlRow <- do.call(rbind,lapply(1:nr,function(i){#
		fact <- 10#
		if(muTab[i,nc]==0) {#
			nc <- max(which(muTab[i,-nc]!=0))#
			fact <-1000#
			}#
		range(round(rnorm(N,muTab[i,nc],fact*sdTab[i,nc])))#
		}))#
	if(is.null(controlCol)) controlCol <- do.call(cbind,lapply(1:nc,function(j)range(round(rnorm(N,colSums(muTab),sqrt(colSums(sdTab^2)))))))#
	iter <- t <- 1#
	while(t <= nIter){#
		sim <- do.call(rbind,lapply(1:nr,function(i){#
			rrow <- rep(NA,nc)#
			repeat{#
				if(muTab[i,nc]==0){#
					nc <- max(which(muTab[i,-nc]!=0))#
					rrow[(1:length(rrow))>nc]<-0#
					rrow[-(nc:length(rrow))] <- round(rtnorm(nc-1, mean=unlist(muTab[i,-(nc:length(rrow))]), sd=sdev, lower=bounds[i,-(nc:length(rrow)),1],upper=bounds[i,-(nc:length(rrow)),2]),0)#
					rrow[nc] <- (n0[i]-sum(rrow[-(nc:length(rrow))]))#
					}else{ #
						rrow[-(nc:length(rrow))] <- round(rtnorm(nc-1, mean=unlist(muTab[i,-nc]), sd=sdev, lower=bounds[i,-nc,1],upper=bounds[i,-nc,2]),0)#
						rrow[nc] <- -(n0[i]-sum(rrow[-nc]))#
						}#
				if(rrow[nc]>=min(controlRow[i,]) & rrow[nc]<=max(controlRow[i,])) break#
				else {cat("err")}#
				}#
				cat("*")#
			return(rrow)#
			}))#
		cat("\n")#
		totCol <- colSums(sim)#
		cond <- sapply(1:nc,function(j)(totCol[j]>=controlCol[1,j] & totCol[j]<=controlCol[2,j]))#
		if(all(cond)){#
			okTab[,,t]<-sim#
			t <- t+1#
			print(t)#
			}#
		iter <- iter + 1#
        }#
      return(list(tabs=okTab,iter=iter))#
	}#
tab <- sampleTables(n0,muTab,bounds)#
sampleTables <- function(n0,muTab, bounds,nIter=100,N=10000,controlCol=NULL,controlRow=NULL,sdev=100){#
	sdTab <- abs((bounds[,,2]-bounds[,,1])/2)#
	nr<-nrow(muTab)#
	nc<-ncol(muTab)#
	okTab <- array(NA,c(nr,nc,nIter))#
	if(is.null(controlRow)) controlRow <- do.call(rbind,lapply(1:nr,function(i){#
		fact <- 10#
		if(muTab[i,nc]==0) {#
			nc <- max(which(muTab[i,-nc]!=0))#
			fact <-1000#
			}#
		range(round(rnorm(N,muTab[i,nc],fact*sdTab[i,nc])))#
		}))#
	if(is.null(controlCol)) controlCol <- do.call(cbind,lapply(1:nc,function(j)range(round(rnorm(N,colSums(muTab),sqrt(colSums(sdTab^2)))))))#
	iter <- t <- 1#
	while(t <= nIter){#
		sim <- do.call(rbind,lapply(1:nr,function(i){#
			rrow <- rep(NA,nc)#
			repeat{#
				if(muTab[i,nc]==0){#
					nc <- max(which(muTab[i,-nc]!=0))#
					rrow[(1:length(rrow))>nc]<-0#
					rrow[-(nc:length(rrow))] <- round(rtnorm(nc-1, mean=unlist(muTab[i,-(nc:length(rrow))]), sd=sdev, lower=bounds[i,-(nc:length(rrow)),1],upper=bounds[i,-(nc:length(rrow)),2]),0)#
					rrow[nc] <- (n0[i]-sum(rrow[-(nc:length(rrow))]))#
					}else{ #
						rrow[-(nc:length(rrow))] <- round(rtnorm(nc-1, mean=unlist(muTab[i,-nc]), sd=sdev, lower=bounds[i,-nc,1],upper=bounds[i,-nc,2]),0)#
						rrow[nc] <- -(n0[i]-sum(rrow[-nc]))#
						}#
				if(rrow[nc]>=min(controlRow[i,]) & rrow[nc]<=max(controlRow[i,])) break#
				else {cat("err")}#
				}#
				cat("*")#
			return(rrow)#
			}))#
		cat("\n")#
		totCol <- colSums(sim)#
		cond <- sapply(1:nc,function(j)(totCol[j]>=controlCol[1,j] & totCol[j]<=controlCol[2,j]))#
		if(all(cond)){#
			okTab[,,t]<-sim#
			t <- t+1#
			print(t)#
			}#
		iter <- iter + 1#
        }#
      return(list(tabs=okTab,iter=iter))#
	}#
tab <- sampleTables(n0,muTab,bounds)#
sampleTables <- function(n0,muTab, bounds,nIter=100,N=10000,controlCol=NULL,controlRow=NULL,sdev=100){#
	sdTab <- abs((bounds[,,2]-bounds[,,1])/2)#
	nr<-nrow(muTab)#
	nc<-ncol(muTab)#
	okTab <- array(NA,c(nr,nc,nIter))#
	if(is.null(controlRow)) controlRow <- do.call(rbind,lapply(1:nr,function(i){#
		fact <- 10#
		if(muTab[i,nc]==0) {#
			nc <- max(which(muTab[i,-nc]!=0))#
			fact <-1000#
			}#
		range(round(rnorm(N,muTab[i,nc],fact*sdTab[i,nc])))#
		}))#
	if(is.null(controlCol)) controlCol <- do.call(cbind,lapply(1:nc,function(j)range(round(rnorm(N,colSums(muTab),sqrt(colSums(sdTab^2)))))))#
	iter <- t <- 1#
	while(t <= nIter){#
		sim <- do.call(rbind,lapply(1:nr,function(i){#
			rrow <- rep(NA,nc)#
			repeat{#
				if(muTab[i,nc]==0){#
					nc <- max(which(muTab[i,-nc]!=0))#
					rrow[(1:length(rrow))>nc]<-0#
					rrow[-(nc:length(rrow))] <- round(rtnorm(nc-1, mean=unlist(muTab[i,-(nc:length(rrow))]), sd=sdev, lower=bounds[i,-(nc:length(rrow)),1],upper=bounds[i,-(nc:length(rrow)),2]),0)#
					rrow[nc] <- (n0[i]-sum(rrow[-(nc:length(rrow))]))#
					}else{ #
						rrow[-(nc:length(rrow))] <- round(rtnorm(nc-1, mean=unlist(muTab[i,-nc]), sd=sdev, lower=bounds[i,-nc,1],upper=bounds[i,-nc,2]),0)#
						rrow[nc] <- -(n0[i]-sum(rrow[-nc]))#
						}#
				if(rrow[nc]>=min(controlRow[i,]) & rrow[nc]<=max(controlRow[i,]))break#
				}#
				cat("*")#
			return(rrow)#
			}))#
		cat("\n")#
		totCol <- colSums(sim)#
		cond <- sapply(1:nc,function(j)(totCol[j]>=controlCol[1,j] & totCol[j]<=controlCol[2,j]))#
		if(all(cond)){#
			okTab[,,t]<-sim#
			t <- t+1#
			print(t)#
			}#
		iter <- iter + 1#
        }#
      return(list(tabs=okTab,iter=iter))#
	}#
tab <- sampleTables(n0,muTab,bounds)#
tab#
n0#
controlRow#
sampleTables <- function(n0,muTab, bounds,nIter=100,N=10000,controlCol=NULL,controlRow=NULL,sdev=100){#
	sdTab <- abs((bounds[,,2]-bounds[,,1])/2)#
	nr<-nrow(muTab)#
	nc<-ncol(muTab)#
	okTab <- array(NA,c(nr,nc,nIter))#
	if(is.null(controlRow)) controlRow <- do.call(rbind,lapply(1:nr,function(i){#
		if(muTab[i,nc]==0) {#
			nc <- max(which(muTab[i,-nc]!=0))#
			}#
		range(round(rtnorm(N,mean=unlist(muTab[i,nc]), sd=sdev, lower=bounds[i,nc,1], upper=bounds[i,nc,0])))#
		}))#
	if(is.null(controlCol)) controlCol <- do.call(cbind,lapply(1:nc,function(j)range(round(rnorm(N,colSums(muTab),sqrt(colSums(sdTab^2)))))))#
	iter <- t <- 1#
	while(t <= nIter){#
		sim <- do.call(rbind,lapply(1:nr,function(i){#
			rrow <- rep(NA,nc)#
			repeat{#
				if(muTab[i,nc]==0){#
					nc <- max(which(muTab[i,-nc]!=0))#
					rrow[(1:length(rrow))>nc]<-0#
					rrow[-(nc:length(rrow))] <- round(rtnorm(nc-1, mean=unlist(muTab[i,-(nc:length(rrow))]), sd=sdev, lower=bounds[i,-(nc:length(rrow)),1],upper=bounds[i,-(nc:length(rrow)),2]),0)#
					rrow[nc] <- (n0[i]-sum(rrow[-(nc:length(rrow))]))#
					}else{ #
						rrow[-(nc:length(rrow))] <- round(rtnorm(nc-1, mean=unlist(muTab[i,-nc]), sd=sdev, lower=bounds[i,-nc,1],upper=bounds[i,-nc,2]),0)#
						rrow[nc] <- -(n0[i]-sum(rrow[-nc]))#
						}#
				if(rrow[nc]>=min(controlRow[i,]) & rrow[nc]<=max(controlRow[i,]))break#
				}#
				cat("*")#
			return(rrow)#
			}))#
		cat("\n")#
		totCol <- colSums(sim)#
		cond <- sapply(1:nc,function(j)(totCol[j]>=controlCol[1,j] & totCol[j]<=controlCol[2,j]))#
		if(all(cond)){#
			okTab[,,t]<-sim#
			t <- t+1#
			print(t)#
			}#
		iter <- iter + 1#
        }#
      return(list(tabs=okTab,iter=iter))#
	}#
tab <- sampleTables(n0,muTab,bounds)#
sampleTables <- function(n0,muTab, bounds,nIter=100,N=10000,controlCol=NULL,controlRow=NULL,sdev=100){#
	sdTab <- abs((bounds[,,2]-bounds[,,1])/2)#
	nr<-nrow(muTab)#
	nc<-ncol(muTab)#
	okTab <- array(NA,c(nr,nc,nIter))#
	if(is.null(controlRow)) controlRow <- do.call(rbind,lapply(1:nr,function(i){#
		if(muTab[i,nc]==0) {#
			nc <- max(which(muTab[i,-nc]!=0))#
			}#
		range(round(rtnorm(N,mean=unlist(muTab[i,nc]), sd=sdev, lower=bounds[i,nc,1], upper=bounds[i,nc,0])))#
		}))#
	if(is.null(controlCol)) controlCol <- do.call(cbind,lapply(1:nc,function(j)range(round(rnorm(N,colSums(muTab),sqrt(colSums(sdTab^2)))))))#
	print(controlRow)#
	iter <- t <- 1#
	while(t <= nIter){#
		sim <- do.call(rbind,lapply(1:nr,function(i){#
			rrow <- rep(NA,nc)#
			repeat{#
				if(muTab[i,nc]==0){#
					nc <- max(which(muTab[i,-nc]!=0))#
					rrow[(1:length(rrow))>nc]<-0#
					rrow[-(nc:length(rrow))] <- round(rtnorm(nc-1, mean=unlist(muTab[i,-(nc:length(rrow))]), sd=sdev, lower=bounds[i,-(nc:length(rrow)),1],upper=bounds[i,-(nc:length(rrow)),2]),0)#
					rrow[nc] <- (n0[i]-sum(rrow[-(nc:length(rrow))]))#
					}else{ #
						rrow[-(nc:length(rrow))] <- round(rtnorm(nc-1, mean=unlist(muTab[i,-nc]), sd=sdev, lower=bounds[i,-nc,1],upper=bounds[i,-nc,2]),0)#
						rrow[nc] <- -(n0[i]-sum(rrow[-nc]))#
						}#
				if(rrow[nc]>=min(controlRow[i,]) & rrow[nc]<=max(controlRow[i,]))break#
				}#
				cat("*")#
			return(rrow)#
			}))#
		cat("\n")#
		totCol <- colSums(sim)#
		cond <- sapply(1:nc,function(j)(totCol[j]>=controlCol[1,j] & totCol[j]<=controlCol[2,j]))#
		if(all(cond)){#
			okTab[,,t]<-sim#
			t <- t+1#
			print(t)#
			}#
		iter <- iter + 1#
        }#
      return(list(tabs=okTab,iter=iter))#
	}#
tab <- sampleTables(n0,muTab,bounds)#
sampleTables <- function(n0,muTab, bounds,nIter=100,N=10000,controlCol=NULL,controlRow=NULL,sdev=100){#
	sdTab <- abs((bounds[,,2]-bounds[,,1])/2)#
	nr<-nrow(muTab)#
	nc<-ncol(muTab)#
	okTab <- array(NA,c(nr,nc,nIter))#
	if(is.null(controlRow)) controlRow <- do.call(rbind,lapply(1:nr,function(i){#
		if(muTab[i,nc]==0) {#
			nc <- max(which(muTab[i,-nc]!=0))#
			}#
		range(round(rtnorm(N,mean=unlist(muTab[i,nc]), sd=sdev, lower=bounds[i,nc,1], upper=bounds[i,nc,2]),0))#
		}))#
	if(is.null(controlCol)) controlCol <- do.call(cbind,lapply(1:nc,function(j)range(round(rnorm(N,colSums(muTab),sqrt(colSums(sdTab^2)))))))#
	cat(controlRow)#
	iter <- t <- 1#
	while(t <= nIter){#
		sim <- do.call(rbind,lapply(1:nr,function(i){#
			rrow <- rep(NA,nc)#
			repeat{#
				if(muTab[i,nc]==0){#
					nc <- max(which(muTab[i,-nc]!=0))#
					rrow[(1:length(rrow))>nc]<-0#
					rrow[-(nc:length(rrow))] <- round(rtnorm(nc-1, mean=unlist(muTab[i,-(nc:length(rrow))]), sd=sdev, lower=bounds[i,-(nc:length(rrow)),1],upper=bounds[i,-(nc:length(rrow)),2]),0)#
					rrow[nc] <- (n0[i]-sum(rrow[-(nc:length(rrow))]))#
					}else{ #
						rrow[-(nc:length(rrow))] <- round(rtnorm(nc-1, mean=unlist(muTab[i,-nc]), sd=sdev, lower=bounds[i,-nc,1],upper=bounds[i,-nc,2]),0)#
						rrow[nc] <- -(n0[i]-sum(rrow[-nc]))#
						}#
				if(rrow[nc]>=min(controlRow[i,]) & rrow[nc]<=max(controlRow[i,]))break#
				}#
				cat("*")#
			return(rrow)#
			}))#
		cat("\n")#
		totCol <- colSums(sim)#
		cond <- sapply(1:nc,function(j)(totCol[j]>=controlCol[1,j] & totCol[j]<=controlCol[2,j]))#
		if(all(cond)){#
			okTab[,,t]<-sim#
			t <- t+1#
			print(t)#
			}#
		iter <- iter + 1#
        }#
      return(list(tabs=okTab,iter=iter))#
	}#
tab <- sampleTables(n0,muTab,bounds)#
#
sampleTables <- function(n0,muTab, bounds,nIter=100,N=10000,controlCol=NULL,controlRow=NULL,sdev=100){#
	sdTab <- abs((bounds[,,2]-bounds[,,1])/2)#
	nr<-nrow(muTab)#
	nc<-ncol(muTab)#
	okTab <- array(NA,c(nr,nc,nIter))#
	if(is.null(controlRow)) controlRow <- do.call(rbind,lapply(1:nr,function(i){#
		if(muTab[i,nc]==0) {#
			nc <- max(which(muTab[i,-nc]!=0))#
			}#
		range(round(rtnorm(N,mean=unlist(muTab[i,nc]), sd=sdev, lower=bounds[i,nc,1], upper=bounds[i,nc,2]),0))#
		}))#
	if(is.null(controlCol)) controlCol <- do.call(cbind,lapply(1:nc,function(j)range(round(rnorm(N,colSums(muTab),sqrt(colSums(sdTab^2)))))))#
	iter <- t <- 1#
	while(t <= nIter){#
		sim <- do.call(rbind,lapply(1:nr,function(i){#
			rrow <- rep(NA,nc)#
			repeat{#
				if(muTab[i,nc]==0){#
					nc <- max(which(muTab[i,-nc]!=0))#
					rrow[(1:length(rrow))>nc]<-0#
					rrow[-(nc:length(rrow))] <- round(rtnorm(nc-1, mean=unlist(muTab[i,-(nc:length(rrow))]), sd=sdev, lower=bounds[i,-(nc:length(rrow)),1],upper=bounds[i,-(nc:length(rrow)),2]),0)#
					rrow[nc] <- (n0[i]-sum(rrow[-(nc:length(rrow))]))#
					}else{ #
						rrow[-(nc:length(rrow))] <- round(rtnorm(nc-1, mean=unlist(muTab[i,-nc]), sd=sdev, lower=bounds[i,-nc,1],upper=bounds[i,-nc,2]),0)#
						rrow[nc] <- -(n0[i]-sum(rrow[-nc]))#
						}#
				if(rrow[nc]>=min(controlRow[i,]) & rrow[nc]<=max(controlRow[i,]))break#
				}#
				cat("*")#
			return(rrow)#
			}))#
		cat("\n")#
		totCol <- colSums(sim)#
		cond <- sapply(1:nc,function(j)(totCol[j]>=controlCol[1,j] & totCol[j]<=controlCol[2,j]))#
		if(all(cond)){#
			okTab[,,t]<-sim#
			t <- t+1#
			print(t)#
			}#
		iter <- iter + 1#
        }#
      return(list(tabs=okTab,iter=iter))#
	}#
tab <- sampleTables(n0,muTab,bounds)#
i = 1#
range(round(rtnorm(N,mean=unlist(muTab[i,nc]), sd=sdev, lower=bounds[i,nc,1], upper=bounds[i,nc,2]),0))#
#
bounds[i,nc,1]#
upper=bounds[i,nc,2])#
bounds[i,nc,2]#
rtnorm(N,mean=unlist(muTab[i,nc]), sd=sdev, lower=bounds[i,nc,1], upper=bounds[i,nc,2])#
i= 1#
nc = 6#
N = 10000#
sdev = 100#
range(round(rtnorm(N,mean=unlist(muTab[i,nc]), sd=sdev, lower=bounds[i,nc,1], upper=bounds[i,nc,2]),0))#
muTab[i,nc]#
unlist(muTab[i,nc])#
range(round(rnorm(N,0,1),0))#
		c(bounds[i,nc,1], bounds[i,nc,2])#
sampleTables <- function(n0,muTab, bounds,nIter=100,N=10000,controlCol=NULL,controlRow=NULL,sdev=100){#
	sdTab <- abs((bounds[,,2]-bounds[,,1])/2)#
	nr<-nrow(muTab)#
	nc<-ncol(muTab)#
	okTab <- array(NA,c(nr,nc,nIter))#
	if(is.null(controlRow)) controlRow <- do.call(rbind,lapply(1:nr,function(i){#
		if(muTab[i,nc]==0) {#
			nc <- max(which(muTab[i,-nc]!=0))#
			}#
		c(bounds[i,nc,1], bounds[i,nc,2])#
		}))#
	if(is.null(controlCol)) controlCol <- do.call(cbind,lapply(1:nc,function(j)range(round(rnorm(N,colSums(muTab),sqrt(colSums(sdTab^2)))))))#
	iter <- t <- 1#
	while(t <= nIter){#
		sim <- do.call(rbind,lapply(1:nr,function(i){#
			rrow <- rep(NA,nc)#
			repeat{#
				if(muTab[i,nc]==0){#
					nc <- max(which(muTab[i,-nc]!=0))#
					rrow[(1:length(rrow))>nc]<-0#
					rrow[-(nc:length(rrow))] <- round(rtnorm(nc-1, mean=unlist(muTab[i,-(nc:length(rrow))]), sd=sdev, lower=bounds[i,-(nc:length(rrow)),1],upper=bounds[i,-(nc:length(rrow)),2]),0)#
					rrow[nc] <- (n0[i]-sum(rrow[-(nc:length(rrow))]))#
					}else{ #
						rrow[-(nc:length(rrow))] <- round(rtnorm(nc-1, mean=unlist(muTab[i,-nc]), sd=sdev, lower=bounds[i,-nc,1],upper=bounds[i,-nc,2]),0)#
						rrow[nc] <- -(n0[i]-sum(rrow[-nc]))#
						}#
				if(rrow[nc]>=min(controlRow[i,]) & rrow[nc]<=max(controlRow[i,]))break#
				}#
				cat("*")#
			return(rrow)#
			}))#
		cat("\n")#
		totCol <- colSums(sim)#
		cond <- sapply(1:nc,function(j)(totCol[j]>=controlCol[1,j] & totCol[j]<=controlCol[2,j]))#
		if(all(cond)){#
			okTab[,,t]<-sim#
			t <- t+1#
			print(t)#
			}#
		iter <- iter + 1#
        }#
      return(list(tabs=okTab,iter=iter))#
	}#
tab <- sampleTables(n0,muTab,bounds)#
tab <- sampleTables(n0,muTab,bounds)#
sampleTables <- function(n0,muTab, bounds,nIter=100,N=10000,controlCol=NULL,controlRow=NULL,sdev=1000){#
	sdTab <- abs((bounds[,,2]-bounds[,,1])/2)#
	nr<-nrow(muTab)#
	nc<-ncol(muTab)#
	okTab <- array(NA,c(nr,nc,nIter))#
	if(is.null(controlRow)) controlRow <- do.call(rbind,lapply(1:nr,function(i){#
		if(muTab[i,nc]==0) {#
			nc <- max(which(muTab[i,-nc]!=0))#
			}#
		c(bounds[i,nc,1], bounds[i,nc,2])#
		}))#
	if(is.null(controlCol)) controlCol <- do.call(cbind,lapply(1:nc,function(j)range(round(rnorm(N,colSums(muTab),sqrt(colSums(sdTab^2)))))))#
	iter <- t <- 1#
	while(t <= nIter){#
		sim <- do.call(rbind,lapply(1:nr,function(i){#
			rrow <- rep(NA,nc)#
			repeat{#
				if(muTab[i,nc]==0){#
					nc <- max(which(muTab[i,-nc]!=0))#
					rrow[(1:length(rrow))>nc]<-0#
					rrow[-(nc:length(rrow))] <- round(rtnorm(nc-1, mean=unlist(muTab[i,-(nc:length(rrow))]), sd=sdev, lower=bounds[i,-(nc:length(rrow)),1],upper=bounds[i,-(nc:length(rrow)),2]),0)#
					rrow[nc] <- (n0[i]-sum(rrow[-(nc:length(rrow))]))#
					}else{ #
						rrow[-(nc:length(rrow))] <- round(rtnorm(nc-1, mean=unlist(muTab[i,-nc]), sd=sdev, lower=bounds[i,-nc,1],upper=bounds[i,-nc,2]),0)#
						rrow[nc] <- -(n0[i]-sum(rrow[-nc]))#
						}#
				if(rrow[nc]>=min(controlRow[i,]) & rrow[nc]<=max(controlRow[i,]))break#
				}#
				cat("*")#
			return(rrow)#
			}))#
		cat("\n")#
		totCol <- colSums(sim)#
		cond <- sapply(1:nc,function(j)(totCol[j]>=controlCol[1,j] & totCol[j]<=controlCol[2,j]))#
		if(all(cond)){#
			okTab[,,t]<-sim#
			t <- t+1#
			print(t)#
			}#
		iter <- iter + 1#
        }#
      return(list(tabs=okTab,iter=iter))#
	}#
tab <- sampleTables(n0,muTab,bounds)#
tab#
muTab#
?time#
rm(list=ls())#
gc()#
require(msm)#
muTab <- read.csv("ExpectedValues.csv",row.names=1,sep=";")#
muTab#
n0<-read.csv("ExpectedValues.csv",header=TRUE,row.names=1,sep=";")[,8]#
n0#
muTab <- muTab[,-(7:8)]#
muTab#
bounds <- array(NA,c(dim(muTab),2))#
dimnames(bounds) <- c(dimnames(muTab),list(c("Lower","Upper")))#
bounds[,,1] <- as.matrix(read.csv("lowerBounds.csv",row.names=1,sep=';'))#
bounds[,,2] <- as.matrix(read.csv("upperBounds.csv",row.names=1,sep=';'))#
sampleTables <- function(n0,muTab, bounds,nIter=100,N=10000,controlCol=NULL,controlRow=NULL,sdev=10){#
	sdTab <- abs((bounds[,,2]-bounds[,,1])/2)#
	nr<-nrow(muTab)#
	nc<-ncol(muTab)#
	okTab <- array(NA,c(nr,nc,nIter))#
	if(is.null(controlRow)) controlRow <- do.call(rbind,lapply(1:nr,function(i){#
		if(muTab[i,nc]==0) nc <- max(which(muTab[i,-nc]!=0))#
		c(bounds[i,nc,1], bounds[i,nc,2])#
		}))#
	if(is.null(controlCol)) controlCol <- do.call(cbind,lapply(1:nc,function(j)range(round(rnorm(N,colSums(muTab),sqrt(colSums(sdTab^2)))))))#
	iter <- t <- 1#
	while(t <= nIter){#
		sim <- do.call(rbind,lapply(1:nr,function(i){#
			rrow <- rep(NA,nc)#
			repeat{#
				if(muTab[i,nc]==0){#
					nc <- max(which(muTab[i,-nc]!=0))#
					rrow[(1:length(rrow))>nc]<-0#
					rrow[-(nc:length(rrow))] <- round(rtnorm(nc-1, mean=unlist(muTab[i,-(nc:length(rrow))]), sd=sdev, lower=bounds[i,-(nc:length(rrow)),1],upper=bounds[i,-(nc:length(rrow)),2]),0)#
					rrow[nc] <- (n0[i]-sum(rrow[-(nc:length(rrow))]))#
					}else{ #
						rrow[-(nc:length(rrow))] <- round(rtnorm(nc-1, mean=unlist(muTab[i,-nc]), sd=sdev, lower=bounds[i,-nc,1],upper=bounds[i,-nc,2]),0)#
						rrow[nc] <- -(n0[i]-sum(rrow[-nc]))#
						}#
				if(rrow[nc]>=min(controlRow[i,]) & rrow[nc]<=max(controlRow[i,]))break#
				}#
				cat("*")#
			return(rrow)#
			}))#
		cat("\n")#
		totCol <- colSums(sim)#
		cond <- sapply(1:nc,function(j)(totCol[j]>=controlCol[1,j] & totCol[j]<=controlCol[2,j]))#
		if(all(cond)){#
			okTab[,,t]<-sim#
			t <- t+1#
			print(t)#
			}#
		iter <- iter + 1#
        }#
      return(list(tabs=okTab,iter=iter))#
	}#
tab <- sampleTables(n0,muTab,bounds)#
rm(list=ls())#
gc()#
setwd("/Users/marcogarieri/Dropbox/Sampling table/R_code/nuove prior/")#
ll#
ls()#
#
muTab <- read.csv("ExpectedValues.csv",row.names=1,sep=";")#
muTab#
#
n0<-read.csv("ExpectedValues.csv",header=TRUE,row.names=1,sep=";")[,8]#
n0#
muTab <- muTab[,-(7:8)]#
muTab#
#
bounds <- array(NA,c(dim(muTab),2))#
dimnames(bounds) <- c(dimnames(muTab),list(c("Lower","Upper")))#
bounds[,,1] <- as.matrix(read.csv("lowerBounds.csv",row.names=1,sep=';'))#
bounds[,,2] <- as.matrix(read.csv("upperBounds.csv",row.names=1,sep=';'))#
#
sdTab <- abs((bounds[,,2]-bounds[,,1])/2)#
#
?function#
nIter=100#
N=10000#
controlCol=NULL#
controlRow=NULL#
	sdTab <- abs((bounds[,,2]-bounds[,,1])/2)#
	nr<-nrow(muTab)#
	nc<-ncol(muTab)#
	okTab <- list()#
	if(is.null(controlRow)) controlRow <- do.call(rbind,lapply(1:nr,function(i){#
		if(muTab[i,nc]==0) nc <- which.max(apply(bounds[i,,],1,function(x)diff(range(x))))#
		range(bounds[i,nc,])#
		}))#
controlRow#
	if(is.null(controlCol)) controlCol <- do.call(cbind,lapply(1:nc,function(j)range(round(rnorm(N,colSums(muTab),sqrt(colSums(sdTab^2)))))))#
getwd()#
setwd("/Users/marcogarieri/Dropbox/Sampling table/R_code/var_colonne/")#
rm(list=ls())#
gc()#
#
require("msm")#
muTab <- read.csv("ExpectedValues.csv",row.names=1,sep=";")#
muTab#
#
n0<-read.csv("ExpectedValues.csv",header=TRUE,row.names=1,sep=";")[,8]#
n0#
muTab <- muTab[,-(7:8)]#
muTab#
#
bounds <- array(NA,c(dim(muTab),2))#
dimnames(bounds) <- c(dimnames(muTab),list(c("Lower","Upper")))#
bounds[,,1] <- as.matrix(read.csv("lowerBounds.csv",row.names=1,sep=';'))#
bounds[,,2] <- as.matrix(read.csv("upperBounds.csv",row.names=1,sep=';'))#
#
lowCol<-read.csv("lowerBounds.csv",row.names=1,sep=';')[8,]#
lowCol#
uppCol<-read.csv("upperBounds.csv",row.names=1,sep=';')[8,]#
uppCol#
uppCol[6]=0#
uppCol#
controlCol1 <- matrix(c(lowCol,uppCol),byrow=T,nrow=2)#
sampleTables <- function(n0,muTab, bounds,nIter=100,N=10000,controlCol=controlCol1,controlRow=NULL,sdev=5,verbose=TRUE){#
	sdTab <- abs((bounds[,,2]-bounds[,,1])/2)#
	nr<-nrow(muTab)#
	nc<-ncol(muTab)#
	okTab <- list()#
	if(is.null(controlRow)) controlRow <- do.call(rbind,lapply(1:nr,function(i){#
		if(muTab[i,nc]==0) nc <- which.max(apply(bounds[i,,],1,function(x)diff(range(x))))#
		range(bounds[i,nc,])#
		}))#
	if(is.null(controlCol)) controlCol <- do.call(cbind,lapply(1:nc,function(j)range(round(rnorm(N,colSums(muTab),sqrt(colSums(sdTab^2)))))))#
	iter <- t <- 1#
	uniqueT <- 1#
	while(t <= nIter){#
		sim <- do.call(rbind,lapply(1:nr,function(i){#
			rrow <- rep(NA,nc)#
			repeat{#
				nc<-ncol(muTab)#
				if(muTab[i,nc]==0){#
					nc <- max(which(muTab[i,-nc]!=0))#
					rrow[(1:length(rrow))>nc]<-0#
					maxTol <- which.max(apply(bounds[i,,],1,function(x)diff(range(x))))#
					rrow[-c(maxTol,(nc+1):length(rrow))] <- round(rtnorm(nc-1, mean=unlist(muTab[i,-c(maxTol,(nc+1):length(rrow))]), sd=sdev, lower=bounds[i,-c(maxTol,(nc+1):length(rrow)),1],upper=bounds[i,-c(maxTol,(nc+1):length(rrow)),2]),0)#
#
					rrow[maxTol] <- (n0[i]-sum(rrow[-c(maxTol,nc+1:length(rrow))]))#
					nc<-maxTol#
					}else{ #
						if(length(rrow[-nc])!=nc-1)browser()#
						rrow[-nc] <- round(rtnorm(nc-1, mean=unlist(muTab[i,-nc]), sd=sdev, lower=bounds[i,-nc,1],upper=bounds[i,-nc,2]),0)#
						rrow[nc] <- -(n0[i]-sum(rrow[-nc]))#
						}#
				if(rrow[nc]>=min(controlRow[i,]) & rrow[nc]<=max(controlRow[i,]))break#
				}#
				if(verbose)cat("*")#
			return(rrow)#
			}))#
		if(verbose)cat("\n")#
		totCol <- colSums(sim)#
		cond <- sapply(1:nc,function(j)(totCol[j]>=controlCol[1,j] & totCol[j]<=controlCol[2,j]))#
		if(all(cond)){#
			if(t==1){#
				okTab[[uniqueT]] <- sim#
				attr(okTab[[uniqueT]],"mult") <- 0#
				}#
			dejavu <- FALSE#
			for(k in 1:uniqueT){#
				if(all(sim==okTab[[k]])){#
					attr(okTab[[k]],"mult") <- attr(okTab[[k]],"mult") + 1#
					break#
					}#
				}#
			if(!dejavu & t<nIter){#
				uniqueT <- uniqueT+1#
				okTab[[uniqueT]] <- sim#
				attr(okTab[[uniqueT]],"mult") <- 1#
				}#
			t <- t+1#
			if(verbose)print(t)#
			}#
		iter <- iter + 1#
        }#
      return(list(tabs=okTab[1:uniqueT],iter=iter))#
	}#
tab <- sampleTables(n0,muTab,bounds,sdev=100)#
rm(list=ls())#
gc()#
#
require("msm")#
muTab <- read.csv("ExpectedValues.csv",row.names=1,sep=";")#
muTab#
#
n0<-read.csv("ExpectedValues.csv",header=TRUE,row.names=1,sep=";")[,8]#
n0#
muTab <- muTab[,-(7:8)]#
muTab#
#
bounds <- array(NA,c(dim(muTab),2))#
dimnames(bounds) <- c(dimnames(muTab),list(c("Lower","Upper")))#
bounds[,,1] <- as.matrix(read.csv("lowerBounds.csv",row.names=1,sep=';'))#
bounds[,,2] <- as.matrix(read.csv("upperBounds.csv",row.names=1,sep=';'))#
#
lowCol<-read.csv("lowerBounds.csv",row.names=1,sep=';')[8,]#
lowCol#
uppCol<-read.csv("upperBounds.csv",row.names=1,sep=';')[8,]#
uppCol#
uppCol[6]=0#
uppCol#
controlCol1 <- matrix(c(lowCol,uppCol),byrow=T,nrow=2)#
#
sampleTables <- function(n0,muTab, bounds,nIter=100,N=10000,controlCol=controlCol1,controlRow=NULL,sdev=5,verbose=TRUE){#
	sdTab <- abs((bounds[,,2]-bounds[,,1])/2)#
	nr<-nrow(muTab)#
	nc<-ncol(muTab)#
	okTab <- list()#
	if(is.null(controlRow)) controlRow <- do.call(rbind,lapply(1:nr,function(i){#
		if(muTab[i,nc]==0) nc <- which.max(apply(bounds[i,,],1,function(x)diff(range(x))))#
		range(bounds[i,nc,])#
		}))#
	if(is.null(controlCol)) controlCol <- do.call(cbind,lapply(1:nc,function(j)range(round(rnorm(N,colSums(muTab),sqrt(colSums(sdTab^2)))))))#
	iter <- t <- 1#
	uniqueT <- 1#
	while(t <= nIter){#
		sim <- do.call(rbind,lapply(1:nr,function(i){#
			rrow <- rep(NA,nc)#
			repeat{#
				nc<-ncol(muTab)#
				if(muTab[i,nc]==0){#
					nc <- max(which(muTab[i,-nc]!=0))#
					rrow[(1:length(rrow))>nc]<-0#
					maxTol <- which.max(apply(bounds[i,,],1,function(x)diff(range(x))))#
					rrow[-c(maxTol,(nc+1):length(rrow))] <- round(rtnorm(nc-1, mean=unlist(muTab[i,-c(maxTol,(nc+1):length(rrow))]), sd=sdev, lower=bounds[i,-c(maxTol,(nc+1):length(rrow)),1],upper=bounds[i,-c(maxTol,(nc+1):length(rrow)),2]),0)#
#
					rrow[maxTol] <- (n0[i]-sum(rrow[-c(maxTol,nc+1:length(rrow))]))#
					nc<-maxTol#
					}else{ #
						if(length(rrow[-nc])!=nc-1)browser()#
						rrow[-nc] <- round(rtnorm(nc-1, mean=unlist(muTab[i,-nc]), sd=sdev, lower=bounds[i,-nc,1],upper=bounds[i,-nc,2]),0)#
						rrow[nc] <- -(n0[i]-sum(rrow[-nc]))#
						}#
				if(rrow[nc]>=min(controlRow[i,]) & rrow[nc]<=max(controlRow[i,]))break#
				}#
				if(verbose)cat("*")#
			return(rrow)#
			}))#
		if(verbose)cat("\n")#
		totCol <- colSums(sim)#
		cond <- sapply(1:nc,function(j)(totCol[j]>=controlCol[1,j] & totCol[j]<=controlCol[2,j]))#
		if(all(cond)){#
			if(t==1){#
				okTab[[uniqueT]] <- sim#
				attr(okTab[[uniqueT]],"mult") <- 0#
				}#
			dejavu <- FALSE#
			for(k in 1:uniqueT){#
				if(all(sim==okTab[[k]])){#
					attr(okTab[[k]],"mult") <- attr(okTab[[k]],"mult") + 1#
					break#
					}#
				}#
			if(!dejavu & t<nIter){#
				uniqueT <- uniqueT+1#
				okTab[[uniqueT]] <- sim#
				attr(okTab[[uniqueT]],"mult") <- 1#
				}#
			t <- t+1#
			if(verbose)print(t)#
			}#
		iter <- iter + 1#
        }#
      return(list(tabs=okTab[1:uniqueT],iter=iter))#
	}#
tab <- sampleTables(n0,muTab,bounds,sdev=100)#
muTab <- read.csv("ExpectedValues.csv",row.names=1,sep=";")[-8,-c(7,8)]#
muTab#
n0<-read.csv("ExpectedValues.csv",header=TRUE,row.names=1,sep=";")[-8,8]#
n0#
muCol<-read.csv("ExpectedValues.csv",row.names=1,sep=";")[8,-c(7,8)]#
muCol#
bounds <- array(NA,c(dim(muTab),2))#
dimnames(bounds) <- c(dimnames(muTab),list(c("Lower","Upper")))#
bounds[,,1] <- as.matrix(read.csv("lowerBounds.csv",row.names=1,sep=';'))[-8,]#
bounds[,,2] <- as.matrix(read.csv("upperBounds.csv",row.names=1,sep=';'))[-8,]#
bounds#
lowCol<-read.csv("lowerBounds.csv",row.names=1,sep=';')[8,]#
lowCol#
uppCol<-read.csv("upperBounds.csv",row.names=1,sep=';')[8,]#
uppCol#
uppCol[6]=0#
uppCol#
controlCol1 <- matrix(c(lowCol,uppCol),byrow=T,nrow=2)#
sampleTables <- function(n0,muTab, bounds,nIter=100,N=10000,controlCol=controlCol1,controlRow=NULL,sdev=100){#
	sdTab <- abs((bounds[,,2]-bounds[,,1])/2)#
	nr<-nrow(muTab)#
	nc<-ncol(muTab)#
	okTab <- array(NA,c(nr,nc,nIter))#
	if(is.null(controlRow)) controlRow <- do.call(rbind,lapply(1:nr,function(i){#
		if(muTab[i,nc]==0) nc <- max(which(muTab[i,-nc]!=0))#
		c(bounds[i,nc,1], bounds[i,nc,2])#
		}))#
	if(is.null(controlCol)) controlCol <- do.call(cbind,lapply(1:nc,function(j)range(round(rnorm(N,colSums(muTab),sqrt(colSums(sdTab^2)))))))#
	iter <- t <- 1#
	while(t <= nIter){#
		sim <- do.call(rbind,lapply(1:nr,function(i){#
			rrow <- rep(NA,nc)#
			repeat{#
				if(muTab[i,nc]==0){#
					nc <- max(which(muTab[i,-nc]!=0))#
					rrow[(1:length(rrow))>nc]<-0#
					rrow[-(nc:length(rrow))] <- round(rtnorm(nc-1, mean=unlist(muTab[i,-(nc:length(rrow))]), sd=sdev, lower=bounds[i,-(nc:length(rrow)),1],upper=bounds[i,-(nc:length(rrow)),2]),0)#
					rrow[nc] <- (n0[i]-sum(rrow[-(nc:length(rrow))]))#
					}else{ #
						rrow[-(nc:length(rrow))] <- round(rtnorm(nc-1, mean=unlist(muTab[i,-nc]), sd=sdev, lower=bounds[i,-nc,1],upper=bounds[i,-nc,2]),0)#
						rrow[nc] <- -(n0[i]-sum(rrow[-nc]))#
						}#
				if(rrow[nc]>=min(controlRow[i,]) & rrow[nc]<=max(controlRow[i,]))break#
				}#
				cat("*")#
			return(rrow)#
			}))#
		cat("\n")#
		totCol <- colSums(sim)#
		cond <- sapply(1:nc,function(j)(totCol[j]>=controlCol[1,j] & totCol[j]<=controlCol[2,j]))#
		if(all(cond)){#
			okTab[,,t]<-sim#
			t <- t+1#
			print(t)#
			}#
		iter <- iter + 1#
        }#
      return(list(tabs=okTab,iter=iter))#
	}#
ptm <- proc.time()	#
tab <- sampleTables(n0,muTab,bounds)#
proc.time() - ptm#
compaTab = function(tab){#
  eqv.tab = list()                     #
  eqv.idx = 0                          #
  act.tab = 1:dim(tab[[1]])[3]        #
  while ( length(act.tab) > 0 ){                            #
    ref.tab = act.tab[1]                                    #
    eqv.idx = eqv.idx + 1                                   #
    eqv.tab[[eqv.idx]] = ref.tab                            #
    names(eqv.tab)[eqv.idx] <- paste("Table", ref.tab)      #
    act.tab = act.tab[-1]                                   #
    act.idx = act.tab                                       #
    for (j in act.idx){                                     #
      if ( all(tab[[1]][,,ref.tab] == tab[[1]][,,j]) ){     #
        eqv.tab[[eqv.idx]] = c(eqv.tab[[eqv.idx]], j)       #
        act.tab = setdiff(act.tab, j)                       #
      }#
    }  #
  }#
  return(eqv.tab)#
}#
out = compaTab(tab)#
out#
muTab <- read.csv("ExpectedValues.csv",row.names=1,sep=";")#
muTab#
#
n0<-read.csv("ExpectedValues.csv",header=TRUE,row.names=1,sep=";")[,8]#
n0#
muTab <- muTab[,-(7:8)]#
muTab#
#
bounds <- array(NA,c(dim(muTab),2))#
dimnames(bounds) <- c(dimnames(muTab),list(c("Lower","Upper")))#
bounds[,,1] <- as.matrix(read.csv("lowerBounds.csv",row.names=1,sep=';'))#
bounds[,,2] <- as.matrix(read.csv("upperBounds.csv",row.names=1,sep=';'))#
#
lowCol<-read.csv("lowerBounds.csv",row.names=1,sep=';')[8,]#
lowCol#
uppCol<-read.csv("upperBounds.csv",row.names=1,sep=';')[8,]#
uppCol#
uppCol[6]=0#
uppCol#
controlCol1 <- matrix(c(lowCol,uppCol),byrow=T,nrow=2)#
#
sampleTables <- function(n0,muTab, bounds,nIter=100,N=10000,controlCol=controlCol1,controlRow=NULL,sdev=5,verbose=TRUE){#
	sdTab <- abs((bounds[,,2]-bounds[,,1])/2)#
	nr<-nrow(muTab)#
	nc<-ncol(muTab)#
	okTab <- list()#
	if(is.null(controlRow)) controlRow <- do.call(rbind,lapply(1:nr,function(i){#
		if(muTab[i,nc]==0) nc <- which.max(apply(bounds[i,,],1,function(x)diff(range(x))))#
		range(bounds[i,nc,])#
		}))#
	if(is.null(controlCol)) controlCol <- do.call(cbind,lapply(1:nc,function(j)range(round(rnorm(N,colSums(muTab),sqrt(colSums(sdTab^2)))))))#
	iter <- t <- 1#
	uniqueT <- 1#
	while(t <= nIter){#
		sim <- do.call(rbind,lapply(1:nr,function(i){#
			rrow <- rep(NA,nc)#
			repeat{#
				nc<-ncol(muTab)#
				if(muTab[i,nc]==0){#
					nc <- max(which(muTab[i,-nc]!=0))#
					rrow[(1:length(rrow))>nc]<-0#
					maxTol <- which.max(apply(bounds[i,,],1,function(x)diff(range(x))))#
					rrow[-c(maxTol,(nc+1):length(rrow))] <- round(rtnorm(nc-1, mean=unlist(muTab[i,-c(maxTol,(nc+1):length(rrow))]), sd=sdev, lower=bounds[i,-c(maxTol,(nc+1):length(rrow)),1],upper=bounds[i,-c(maxTol,(nc+1):length(rrow)),2]),0)#
#
					rrow[maxTol] <- (n0[i]-sum(rrow[-c(maxTol,nc+1:length(rrow))]))#
					nc<-maxTol#
					}else{ #
						if(length(rrow[-nc])!=nc-1)browser()#
						rrow[-nc] <- round(rtnorm(nc-1, mean=unlist(muTab[i,-nc]), sd=sdev, lower=bounds[i,-nc,1],upper=bounds[i,-nc,2]),0)#
						rrow[nc] <- -(n0[i]-sum(rrow[-nc]))#
						}#
				if(rrow[nc]>=min(controlRow[i,]) & rrow[nc]<=max(controlRow[i,]))break#
				}#
				if(verbose)cat("*")#
			return(rrow)#
			}))#
		if(verbose)cat("\n")#
		totCol <- colSums(sim)#
		cond <- sapply(1:nc,function(j)(totCol[j]>=controlCol[1,j] & totCol[j]<=controlCol[2,j]))#
		if(all(cond)){#
			okTab[,,t]<-sim#
			t <- t+1#
			print(t)#
			}#
		iter <- iter + 1#
        }#
      return(list(tabs=okTab,iter=iter))#
	}#
tab <- sampleTables(n0,muTab,bounds,sdev=100)#
#
muTab <- read.csv("ExpectedValues.csv",row.names=1,sep=";")[-8,-c(7,8)]#
muTab#
#
n0<-read.csv("ExpectedValues.csv",header=TRUE,row.names=1,sep=";")[-8,8]#
n0#
muCol<-read.csv("ExpectedValues.csv",row.names=1,sep=";")[8,-c(7,8)]#
muCol#
bounds <- array(NA,c(dim(muTab),2))#
dimnames(bounds) <- c(dimnames(muTab),list(c("Lower","Upper")))#
bounds[,,1] <- as.matrix(read.csv("lowerBounds.csv",row.names=1,sep=';'))[-8,]#
bounds[,,2] <- as.matrix(read.csv("upperBounds.csv",row.names=1,sep=';'))[-8,]#
#
bounds#
lowCol<-read.csv("lowerBounds.csv",row.names=1,sep=';')[8,]#
lowCol#
uppCol<-read.csv("upperBounds.csv",row.names=1,sep=';')[8,]#
uppCol#
uppCol[6]=0#
uppCol#
controlCol1 <- matrix(c(lowCol,uppCol),byrow=T,nrow=2)#
#
muTab <- read.csv("ExpectedValues.csv",row.names=1,sep=";")[-8,-c(7,8)]#
muTab#
#
n0<-read.csv("ExpectedValues.csv",header=TRUE,row.names=1,sep=";")[-8,8]#
n0#
muCol<-read.csv("ExpectedValues.csv",row.names=1,sep=";")[8,-c(7,8)]#
muCol#
bounds <- array(NA,c(dim(muTab),2))#
dimnames(bounds) <- c(dimnames(muTab),list(c("Lower","Upper")))#
bounds[,,1] <- as.matrix(read.csv("lowerBounds.csv",row.names=1,sep=';'))[-8,]#
bounds[,,2] <- as.matrix(read.csv("upperBounds.csv",row.names=1,sep=';'))[-8,]#
#
bounds#
lowCol<-read.csv("lowerBounds.csv",row.names=1,sep=';')[8,]#
lowCol#
uppCol<-read.csv("upperBounds.csv",row.names=1,sep=';')[8,]#
uppCol#
uppCol[6]=0#
uppCol#
controlCol1 <- matrix(c(lowCol,uppCol),byrow=T,nrow=2)#
#
sampleTables <- function(n0,muTab, bounds,nIter=100,N=10000,controlCol=controlCol1,controlRow=NULL,sdev=100){#
	sdTab <- abs((bounds[,,2]-bounds[,,1])/2)#
	nr<-nrow(muTab)#
	nc<-ncol(muTab)#
	okTab <- array(NA,c(nr,nc,nIter))#
	if(is.null(controlRow)) controlRow <- do.call(rbind,lapply(1:nr,function(i){#
		if(muTab[i,nc]==0) nc <- max(which(muTab[i,-nc]!=0))#
		c(bounds[i,nc,1], bounds[i,nc,2])#
		}))#
	if(is.null(controlCol)) controlCol <- do.call(cbind,lapply(1:nc,function(j)range(round(rnorm(N,colSums(muTab),sqrt(colSums(sdTab^2)))))))#
	iter <- t <- 1#
	while(t <= nIter){#
		sim <- do.call(rbind,lapply(1:nr,function(i){#
			rrow <- rep(NA,nc)#
			repeat{#
				if(muTab[i,nc]==0){#
					nc <- max(which(muTab[i,-nc]!=0))#
					rrow[(1:length(rrow))>nc]<-0#
					maxTol <- which.max(apply(bounds[i,,],1,function(x)diff(range(x))))#
					rrow[-c(maxTol,(nc+1):length(rrow))] <- round(rtnorm(nc-1, mean=unlist(muTab[i,-c(maxTol,(nc+1):length(rrow))]), sd=sdev, lower=bounds[i,-c(maxTol,(nc+1):length(rrow)),1],upper=bounds[i,-c(maxTol,(nc+1):length(rrow)),2]),0)#
#
					rrow[maxTol] <- (n0[i]-sum(rrow[-c(maxTol,nc+1:length(rrow))]))#
					nc<-maxTol#
					}else{ #
						rrow[-(nc:length(rrow))] <- round(rtnorm(nc-1, mean=unlist(muTab[i,-nc]), sd=sdev, lower=bounds[i,-nc,1],upper=bounds[i,-nc,2]),0)#
						rrow[nc] <- -(n0[i]-sum(rrow[-nc]))#
						}#
				if(rrow[nc]>=min(controlRow[i,]) & rrow[nc]<=max(controlRow[i,]))break#
				}#
				cat("*")#
			return(rrow)#
			}))#
		cat("\n")#
		totCol <- colSums(sim)#
		cond <- sapply(1:nc,function(j)(totCol[j]>=controlCol[1,j] & totCol[j]<=controlCol[2,j]))#
		if(all(cond)){#
			okTab[,,t]<-sim#
			t <- t+1#
			print(t)#
			}#
		iter <- iter + 1#
        }#
      return(list(tabs=okTab,iter=iter))#
	}#
#
ptm <- proc.time()	#
tab <- sampleTables(n0,muTab,bounds)#
proc.time() - ptm#
				nc<-ncol(muTab)#
nc#
require(msm)#
muTab <- read.csv("ExpectedValues.csv",row.names=1,sep=";")[-8,-c(7,8)]#
muTab#
#
n0<-read.csv("ExpectedValues.csv",header=TRUE,row.names=1,sep=";")[-8,8]#
n0#
muCol<-read.csv("ExpectedValues.csv",row.names=1,sep=";")[8,-c(7,8)]#
muCol#
bounds <- array(NA,c(dim(muTab),2))#
dimnames(bounds) <- c(dimnames(muTab),list(c("Lower","Upper")))#
bounds[,,1] <- as.matrix(read.csv("lowerBounds.csv",row.names=1,sep=';'))[-8,]#
bounds[,,2] <- as.matrix(read.csv("upperBounds.csv",row.names=1,sep=';'))[-8,]#
#
bounds#
lowCol<-read.csv("lowerBounds.csv",row.names=1,sep=';')[8,]#
lowCol#
uppCol<-read.csv("upperBounds.csv",row.names=1,sep=';')[8,]#
uppCol#
uppCol[6]=0#
uppCol#
controlCol1 <- matrix(c(lowCol,uppCol),byrow=T,nrow=2)#
#
sampleTables <- function(n0,muTab, bounds,nIter=100,N=10000,controlCol=controlCol1,controlRow=NULL,sdev=100){#
	sdTab <- abs((bounds[,,2]-bounds[,,1])/2)#
	nr<-nrow(muTab)#
	nc<-ncol(muTab)#
	okTab <- array(NA,c(nr,nc,nIter))#
	if(is.null(controlRow)) controlRow <- do.call(rbind,lapply(1:nr,function(i){#
		if(muTab[i,nc]==0) nc <- which.max(apply(bounds[i,,],1,function(x)diff(range(x))))#
		c(bounds[i,nc,1], bounds[i,nc,2])#
		}))#
	if(is.null(controlCol)) controlCol <- do.call(cbind,lapply(1:nc,function(j)range(round(rnorm(N,colSums(muTab),sqrt(colSums(sdTab^2)))))))#
	iter <- t <- 1#
	while(t <= nIter){#
		sim <- do.call(rbind,lapply(1:nr,function(i){#
			rrow <- rep(NA,nc)#
			repeat{#
				if(muTab[i,nc]==0){#
					nc <- max(which(muTab[i,-nc]!=0))#
					rrow[(1:length(rrow))>nc]<-0#
					maxTol <- which.max(apply(bounds[i,,],1,function(x)diff(range(x))))#
					rrow[-c(maxTol,(nc+1):length(rrow))] <- round(rtnorm(nc-1, mean=unlist(muTab[i,-c(maxTol,(nc+1):length(rrow))]), sd=sdev, lower=bounds[i,-c(maxTol,(nc+1):length(rrow)),1],upper=bounds[i,-c(maxTol,(nc+1):length(rrow)),2]),0)#
#
					rrow[maxTol] <- (n0[i]-sum(rrow[-c(maxTol,nc+1:length(rrow))]))#
					nc<-maxTol#
					}else{ #
						rrow[-(nc:length(rrow))] <- round(rtnorm(nc-1, mean=unlist(muTab[i,-nc]), sd=sdev, lower=bounds[i,-nc,1],upper=bounds[i,-nc,2]),0)#
						rrow[nc] <- -(n0[i]-sum(rrow[-nc]))#
						}#
				if(rrow[nc]>=min(controlRow[i,]) & rrow[nc]<=max(controlRow[i,]))break#
				}#
				cat("*")#
			return(rrow)#
			}))#
		cat("\n")#
		totCol <- colSums(sim)#
		cond <- sapply(1:nc,function(j)(totCol[j]>=controlCol[1,j] & totCol[j]<=controlCol[2,j]))#
		if(all(cond)){#
			okTab[,,t]<-sim#
			t <- t+1#
			print(t)#
			}#
		iter <- iter + 1#
        }#
      return(list(tabs=okTab,iter=iter))#
	}#
#
ptm <- proc.time()	#
tab <- sampleTables(n0,muTab,bounds)#
proc.time() - ptm#
tab#
compaTab = function(tab){#
  eqv.tab = list()                     #
  eqv.idx = 0                          #
  act.tab = 1:dim(tab[[1]])[3]        #
  while ( length(act.tab) > 0 ){                            #
    ref.tab = act.tab[1]                                    #
    eqv.idx = eqv.idx + 1                                   #
    eqv.tab[[eqv.idx]] = ref.tab                            #
    names(eqv.tab)[eqv.idx] <- paste("Table", ref.tab)      #
    act.tab = act.tab[-1]                                   #
    act.idx = act.tab                                       #
    for (j in act.idx){                                     #
      if ( all(tab[[1]][,,ref.tab] == tab[[1]][,,j]) ){     #
        eqv.tab[[eqv.idx]] = c(eqv.tab[[eqv.idx]], j)       #
        act.tab = setdiff(act.tab, j)                       #
      }#
    }  #
  }#
  return(eqv.tab)#
}#
#
out = compaTab(tab)#
out#
as.matrix(lapply(out, length))#
den <- 1:3#
reject <- rmse <- time <- rep(NA,length(den))#
#
Scenario <- read.csv("ValoriItalia.csv",sep=",",row.names=1)[,-(7:9)]#
#
for(i in 1:length(den)){#
	print(i)#
	controlCol <- do.call(cbind,lapply(1:ncol(muTab),function(j)range(round(rnorm(10000,colSums(muTab),sqrt(colSums(sdTab^2))/den[i])))))#
	time[i]<-system.time(res <- sampleTables(n0,muTab,bounds,controlCol=controlCol))[3]#
	rmse[i] <- sqrt(sum(unlist(lapply(res[[1]],function(t)sum((t-Scenario)^2)))))#
	reject[i] <- res[[2]]#
	gc()#
	}#
plot(1/den,time,type="b",col="b)#
sdTab <- abs((bounds[,,2]-bounds[,,1])/2)#
qkdsds#
dkwdjq#
weqweqwe#
qweqwe#
qwe#
qw#
2#
23#
2313#
)#
}#
]#
getwd()#
rm(list=ls())#
gc()#
#
require(msm)#
muTab <- read.csv("ExpectedValues.csv",row.names=1,sep=";")[-8,-c(7,8)]#
muTab#
#
n0<-read.csv("ExpectedValues.csv",header=TRUE,row.names=1,sep=";")[-8,8]#
n0#
muCol<-read.csv("ExpectedValues.csv",row.names=1,sep=";")[8,-c(7,8)]#
muCol#
bounds <- array(NA,c(dim(muTab),2))#
dimnames(bounds) <- c(dimnames(muTab),list(c("Lower","Upper")))#
bounds[,,1] <- as.matrix(read.csv("lowerBounds.csv",row.names=1,sep=';'))[-8,]#
bounds[,,2] <- as.matrix(read.csv("upperBounds.csv",row.names=1,sep=';'))[-8,]#
#
bounds#
lowCol<-read.csv("lowerBounds.csv",row.names=1,sep=';')[8,]#
lowCol#
uppCol<-read.csv("upperBounds.csv",row.names=1,sep=';')[8,]#
uppCol#
uppCol[6]=0#
uppCol#
controlCol1 <- matrix(c(lowCol,uppCol),byrow=T,nrow=2)#
#
sdTab <- abs((bounds[,,2]-bounds[,,1])/2)#
#
sampleTables <- function(n0,muTab, bounds,nIter=100,N=10000,controlCol=controlCol1,controlRow=NULL,sdev=100){#
	sdTab <- abs((bounds[,,2]-bounds[,,1])/2)#
	nr<-nrow(muTab)#
	nc<-ncol(muTab)#
	okTab <- array(NA,c(nr,nc,nIter))#
	if(is.null(controlRow)) controlRow <- do.call(rbind,lapply(1:nr,function(i){#
		if(muTab[i,nc]==0) nc <- which.max(apply(bounds[i,,],1,function(x)diff(range(x))))#
		c(bounds[i,nc,1], bounds[i,nc,2])#
		}))#
	if(is.null(controlCol)) controlCol <- do.call(cbind,lapply(1:nc,function(j)range(round(rnorm(N,colSums(muTab),sqrt(colSums(sdTab^2)))))))#
	iter <- t <- 1#
	while(t <= nIter){#
		sim <- do.call(rbind,lapply(1:nr,function(i){#
			rrow <- rep(NA,nc)#
			repeat{#
				if(muTab[i,nc]==0){#
					nc <- max(which(muTab[i,-nc]!=0))#
					rrow[(1:length(rrow))>nc]<-0#
					maxTol <- which.max(apply(bounds[i,,],1,function(x)diff(range(x))))#
					rrow[-c(maxTol,(nc+1):length(rrow))] <- round(rtnorm(nc-1, mean=unlist(muTab[i,-c(maxTol,(nc+1):length(rrow))]), sd=sdev, lower=bounds[i,-c(maxTol,(nc+1):length(rrow)),1],upper=bounds[i,-c(maxTol,(nc+1):length(rrow)),2]),0)#
#
					rrow[maxTol] <- (n0[i]-sum(rrow[-c(maxTol,nc+1:length(rrow))]))#
					nc<-maxTol#
					}else{ #
						rrow[-(nc:length(rrow))] <- round(rtnorm(nc-1, mean=unlist(muTab[i,-nc]), sd=sdev, lower=bounds[i,-nc,1],upper=bounds[i,-nc,2]),0)#
						rrow[nc] <- -(n0[i]-sum(rrow[-nc]))#
						}#
				if(rrow[nc]>=min(controlRow[i,]) & rrow[nc]<=max(controlRow[i,]))break#
				}#
				cat("*")#
			return(rrow)#
			}))#
		cat("\n")#
		totCol <- colSums(sim)#
		cond <- sapply(1:nc,function(j)(totCol[j]>=controlCol[1,j] & totCol[j]<=controlCol[2,j]))#
		if(all(cond)){#
			okTab[,,t]<-sim#
			t <- t+1#
			print(t)#
			}#
		iter <- iter + 1#
        }#
      return(list(tabs=okTab,iter=iter))#
	}#
#
ptm <- proc.time()	#
tab <- sampleTables(n0,muTab,bounds)#
proc.time() - ptm#
#
compaTab = function(tab){#
  eqv.tab = list()                     #
  eqv.idx = 0                          #
  act.tab = 1:dim(tab[[1]])[3]        #
  while ( length(act.tab) > 0 ){                            #
    ref.tab = act.tab[1]                                    #
    eqv.idx = eqv.idx + 1                                   #
    eqv.tab[[eqv.idx]] = ref.tab                            #
    names(eqv.tab)[eqv.idx] <- paste("Table", ref.tab)      #
    act.tab = act.tab[-1]                                   #
    act.idx = act.tab                                       #
    for (j in act.idx){                                     #
      if ( all(tab[[1]][,,ref.tab] == tab[[1]][,,j]) ){     #
        eqv.tab[[eqv.idx]] = c(eqv.tab[[eqv.idx]], j)       #
        act.tab = setdiff(act.tab, j)                       #
      }#
    }  #
  }#
  return(eqv.tab)#
}#
#
out = compaTab(tab)#
out#
as.matrix(lapply(out, length))#
den <- 1:3#
reject <- rmse <- time <- rep(NA,length(den))#
#
Scenario <- read.csv("ValoriItalia.csv",sep=",",row.names=1)[,-(7:9)]#
#
for(i in 1:length(den)){#
	print(i)#
	controlCol <- do.call(cbind,lapply(1:ncol(muTab),function(j)range(round(rnorm(10000,colSums(muTab),sqrt(colSums(sdTab^2))/den[i])))))#
	time[i]<-system.time(res <- sampleTables(n0,muTab,bounds,controlCol=controlCol))[3]#
	rmse[i] <- sqrt(sum(unlist(lapply(res[[1]],function(t)sum((t-Scenario)^2)))))#
	reject[i] <- res[[2]]#
	gc()#
	}#
plot(1/den,time,type="b",col="b)#
ue)#

rm(list=ls())#
gc()#
require(msm)#
muTab <- read.csv("ExpectedValues.csv",row.names=1,sep=";")[-8,-c(7,8)]#
muTab#
#
n0<-read.csv("ExpectedValues.csv",header=TRUE,row.names=1,sep=";")[-8,8]#
n0#
muCol<-read.csv("ExpectedValues.csv",row.names=1,sep=";")[8,-c(7,8)]#
muCol#
bounds <- array(NA,c(dim(muTab),2))#
dimnames(bounds) <- c(dimnames(muTab),list(c("Lower","Upper")))#
bounds[,,1] <- as.matrix(read.csv("lowerBounds.csv",row.names=1,sep=';'))[-8,]#
bounds[,,2] <- as.matrix(read.csv("upperBounds.csv",row.names=1,sep=';'))[-8,]#
bounds#
lowCol<-read.csv("lowerBounds.csv",row.names=1,sep=';')[8,]#
lowCol#
#
uppCol<-read.csv("upperBounds.csv",row.names=1,sep=';')[8,]#
uppCol#
uppCol[6]=0#
uppCol#
#
controlCol1 <- matrix(c(lowCol,uppCol),byrow=T,nrow=2)#
#
sdTab <- abs((bounds[,,2]-bounds[,,1])/2)#

#
den <- 1:3#
reject <- rmse <- time <- rep(NA,length(den))#
#
Scenario <- read.csv("ValoriItalia.csv",sep=",",row.names=1)[,-(7:9)]#
#
for(i in 1:length(den)){#
	print(i)#
	controlCol <- do.call(cbind,lapply(1:ncol(muTab),function(j)range(round(rnorm(10000,colSums(muTab),sqrt(colSums(sdTab^2))/den[i])))))#
	time[i]<-system.time(res <- sampleTables(n0,muTab,bounds,controlCol=controlCol))[3]#
	rmse[i] <- sqrt(sum(unlist(lapply(res[[1]],function(t)sum((t-Scenario)^2)))))#
	reject[i] <- res[[2]]#
	gc()#
	}#
plot(1/den,time,type="b",col="blue")#

Scenario <- read.csv("ValoriItalia.csv",sep=",",row.names=1)[,-(7:9)]#

Scenario <- read.csv("ValoriItalia.csv",sep=",",row.names=1)#

Scenario#

